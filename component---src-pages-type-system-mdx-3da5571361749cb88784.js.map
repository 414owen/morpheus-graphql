{"version":3,"sources":["webpack:///./src/components/section.js","webpack:///./src/pages/type-system.mdx"],"names":["Section","id","children","setItem","useContext","NavContext","style","color","textDecoration","padding","_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","title","keywords","parentName","isMDXComponent"],"mappings":"6QAGaA,EAAU,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,GAAIC,EAAe,EAAfA,SAK5B,OAFAC,EAFoBC,qBAAWC,KAA/B,IAEQ,CAAEJ,KAAIC,aAGZ,wBACED,GAAE,GAAKA,EACPK,MAAO,CAAEC,MAAO,QAASC,eAAgB,OAAQC,QAAS,gBAEzDP,I,iBCHMQ,EAAe,GACtBC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,iBACD,OAAO,YAACJ,EAAD,iBAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAI5E,YAAC,IAAD,CAAKC,MAAM,cAAcC,SAAU,CAAC,mBAAoB,UAAW,UAAW,eAAgBF,QAAQ,QACtG,qCACA,YAAC,EAAD,CAAShB,GAAG,QAAQgB,QAAQ,WAA5B,WACA,kGACA,qCACE,SAAY,UACZ,SAAY,SACZ,MAAS,WACT,eAAgB,QAJlB,eAMQ,oBAAMG,WAAW,wBACrB,KAAQ,QADJ,0HANR,cAmBA,YAAC,EAAD,CAASnB,GAAG,SAASgB,QAAQ,WAA7B,UACA,4EAA2D,0BAAYG,WAAW,KAAvB,WAA3D,yBAAwI,iBAAGA,WAAW,IAClJ,KAAQ,gDACP,kBAAIA,WAAW,KAAf,cAFL,qFAGA,qCACE,SAAY,UACZ,SAAY,SACZ,MAAS,WACT,eAAgB,QAJlB,eAMQ,oBAAMA,WAAW,wBACrB,KAAQ,QADJ,mTANR,cAgBA,8BAAa,0BAAYA,WAAW,KAAvB,SAAb,kBACA,wEAAuD,0BAAYA,WAAW,KAAvB,YAAvD,sBACA,yDACA,qCACE,SAAY,UACZ,SAAY,SACZ,MAAS,WACT,eAAgB,QAJlB,eAMQ,oBAAMA,WAAW,wBACrB,KAAQ,QADJ,4PANR,cA4BA,0QAGA,qCACE,SAAY,UACZ,SAAY,SACZ,MAAS,WACT,eAAgB,QAJlB,eAMQ,oBAAMA,WAAW,wBACrB,KAAQ,QADJ,mXANR,cAuBA,2DACA,qCACE,SAAY,UACZ,SAAY,SACZ,MAAS,WACT,eAAgB,QAJlB,eAMQ,oBAAMA,WAAW,wBACrB,KAAQ,QADJ,uUANR,cAgCA,sBACE,kBAAIA,WAAW,MACb,iBAAGA,WAAW,MAAd,mIAEF,kBAAIA,WAAW,MACb,iBAAGA,WAAW,MAAd,0DAA8E,0BAAYA,WAAW,KAAvB,mBAA9E,SAAmJ,0BAAYA,WAAW,KAAvB,iBAAnJ,mCAAgP,0BAAYA,WAAW,KAAvB,uBAAhP,kCAGJ,YAAC,EAAD,CAASnB,GAAG,UAAUgB,QAAQ,WAA9B,aACA,4FAA2E,0BAAYG,WAAW,KAAvB,cAA3E,QAA0I,0BAAYA,WAAW,KAAvB,aAA1I,kBACA,qCACE,SAAY,UACZ,SAAY,SACZ,MAAS,WACT,eAAgB,QAJlB,eAMQ,oBAAMA,WAAW,wBACrB,KAAQ,QADJ,wSANR,cAoBA,YAAC,EAAD,CAASnB,GAAG,aAAagB,QAAQ,WAAjC,cACA,sBACE,kBAAIG,WAAW,MACb,iBAAGA,WAAW,MAAd,+DACA,qCAAuBA,WAAW,KAChC,SAAY,UACZ,SAAY,SACZ,MAAS,WACT,eAAgB,QAJlB,eAMI,oBAAMA,WAAW,wBACjB,KAAQ,QADR,wVANJ,eAoBF,kBAAIA,WAAW,MACb,iBAAGA,WAAW,MAAd,iBAAqC,0BAAYA,WAAW,KAAvB,qBAArC,QAA2G,0BAAYA,WAAW,KAAvB,OAA3G,+BACA,qCAAuBA,WAAW,KAChC,SAAY,UACZ,SAAY,SACZ,MAAS,WACT,eAAgB,QAJlB,eAMI,oBAAMA,WAAW,wBACjB,KAAQ,QADR,iGANJ,iBAsBRN,EAAWO,gBAAiB","file":"component---src-pages-type-system-mdx-3da5571361749cb88784.js","sourcesContent":["import React, { useContext } from \"react\";\nimport { NavContext } from \"./nav-context\";\n\nexport const Section = ({ id, children }) => {\n  const [, setItem] = useContext(NavContext);\n\n  setItem({ id, children });\n\n  return (\n    <h2\n      id={`${id}`}\n      style={{ color: \"black\", textDecoration: \"none\", padding: \"0.1rem 0rem\" }}\n    >\n      {children}\n    </h2>\n  );\n};\n","import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/morpheus-graphql/morpheus-graphql/docs/src/components/layout.js\";\nimport SEO from \"../components/seo\";\nimport { Section } from \"../components/section\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <SEO title=\"Type System\" keywords={[\"Morpheus GraphQL\", \"GraphQL\", \"Haskell\", \"Type System\"]} mdxType=\"SEO\" />\n    <h1>{`Type System`}</h1>\n    <Section id=\"enums\" mdxType=\"Section\"> Enums </Section>\n    <p>{`Data types where all constructors are empty are derived as GraphQL enums.`}</p>\n    <deckgo-highlight-code {...{\n      \"language\": \"haskell\",\n      \"terminal\": \"carbon\",\n      \"theme\": \"one-dark\",\n      \"line-numbers\": \"true\"\n    }}>{`\n          `}<code parentName=\"deckgo-highlight-code\" {...{\n        \"slot\": \"code\"\n      }}>{`data City\n  = Athens\n  | Sparta\n  | Corinth\n  | Delphi\n  | Argos\n  deriving\n    ( Generic\n    , GQLType\n    )`}</code>{`\n        `}</deckgo-highlight-code>\n    <Section id=\"Unions\" mdxType=\"Section\">Unions</Section>\n    <p>{`To use union type, all you have to do is derive the `}<inlineCode parentName=\"p\">{`GQLType`}</inlineCode>{` class. Using GraphQL `}<a parentName=\"p\" {...{\n        \"href\": \"https://graphql.org/learn/queries/#fragments\"\n      }}><em parentName=\"a\">{`fragments`}</em></a>{`, the arguments of each data constructor can be accessed from the GraphQL client.`}</p>\n    <deckgo-highlight-code {...{\n      \"language\": \"haskell\",\n      \"terminal\": \"carbon\",\n      \"theme\": \"one-dark\",\n      \"line-numbers\": \"true\"\n    }}>{`\n          `}<code parentName=\"deckgo-highlight-code\" {...{\n        \"slot\": \"code\"\n      }}>{`data Character\n  = CharacterDeity Deity -- will be unwrapped, since Character + Deity = CharacterDeity\n  | SomeDeity Deity -- will be wrapped since Character + Deity != SomeDeity\n  | Creature { creatureName :: Text, creatureAge :: Int }\n  | Demigod Text Text\n  | Zeus\n  deriving (Generic, GQLType)`}</code>{`\n        `}</deckgo-highlight-code>\n    <p>{`where `}<inlineCode parentName=\"p\">{`Deity`}</inlineCode>{` is an object.`}</p>\n    <p>{`As we see, there are different kinds of unions. `}<inlineCode parentName=\"p\">{`Morpheus`}</inlineCode>{` handles them all.`}</p>\n    <p>{`This type will be represented as`}</p>\n    <deckgo-highlight-code {...{\n      \"language\": \"graphql\",\n      \"terminal\": \"carbon\",\n      \"theme\": \"one-dark\",\n      \"line-numbers\": \"true\"\n    }}>{`\n          `}<code parentName=\"deckgo-highlight-code\" {...{\n        \"slot\": \"code\"\n      }}>{`union Character = Deity | SomeDeity | Creature | SomeMulti | Zeus\n\ntype SomeDeity {\n  _0: Deity!\n}\n\ntype Creature {\n  creatureName: String!\n  creatureAge: Int!\n}\n\ntype Demigod {\n  _0: Int!\n  _1: String!\n}\n\ntype Zeus {\n  _: Unit!\n}`}</code>{`\n        `}</deckgo-highlight-code>\n    <p>{`By default, union members will be generated with wrapper objects.\nThere is one exception to this: if a constructor of a type is the type name concatenated with the name of the contained type, it will be referenced directly.\nThat is, given:`}</p>\n    <deckgo-highlight-code {...{\n      \"language\": \"haskell\",\n      \"terminal\": \"carbon\",\n      \"theme\": \"one-dark\",\n      \"line-numbers\": \"true\"\n    }}>{`\n          `}<code parentName=\"deckgo-highlight-code\" {...{\n        \"slot\": \"code\"\n      }}>{`data Song = { songName :: Text, songDuration :: Float } deriving (Generic, GQLType)\n\ndata Skit = { skitName :: Text, skitDuration :: Float } deriving (Generic, GQLType)\n\ndata WrappedNode\n  = WrappedSong Song\n  | WrappedSkit Skit\n  deriving (Generic, GQLType)\n\ndata NonWrapped\n  = NonWrappedSong Song\n  | NonWrappedSkit Skit\n  deriving (Generic, GQLType)\n`}</code>{`\n        `}</deckgo-highlight-code>\n    <p>{`You will get the following schema:`}</p>\n    <deckgo-highlight-code {...{\n      \"language\": \"graphql\",\n      \"terminal\": \"carbon\",\n      \"theme\": \"one-dark\",\n      \"line-numbers\": \"true\"\n    }}>{`\n          `}<code parentName=\"deckgo-highlight-code\" {...{\n        \"slot\": \"code\"\n      }}>{`# has wrapper types\nunion WrappedNode = WrappedSong | WrappedSkit\n\n# is a direct union\nunion NonWrapped = Song | Skit\n\ntype WrappedSong {\n  _0: Song!\n}\n\ntype WrappedSKit {\n  _0: Skit!\n}\n\ntype Song {\n  songDuration: Float!\n  songName: String!\n}\n\ntype Skit {\n  skitDuration: Float!\n  skitName: String!\n}`}</code>{`\n        `}</deckgo-highlight-code>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`for all other unions will be generated new object type. for types without record syntax, fields will be automatically indexed.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`all empty constructors in union will be summed in type `}<inlineCode parentName=\"p\">{`<tyConName>Enum`}</inlineCode>{` (e.g `}<inlineCode parentName=\"p\">{`CharacterEnum`}</inlineCode>{`), this enum will be wrapped in `}<inlineCode parentName=\"p\">{`CharacterEnumObject`}</inlineCode>{` and added to union members.`}</p>\n      </li>\n    </ul>\n    <Section id=\"scalars\" mdxType=\"Section\"> Scalars </Section>\n    <p>{`To use custom scalar types, you need to provide implementations for `}<inlineCode parentName=\"p\">{`parseValue`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`serialize`}</inlineCode>{` respectively.`}</p>\n    <deckgo-highlight-code {...{\n      \"language\": \"haskell\",\n      \"terminal\": \"carbon\",\n      \"theme\": \"one-dark\",\n      \"line-numbers\": \"true\"\n    }}>{`\n          `}<code parentName=\"deckgo-highlight-code\" {...{\n        \"slot\": \"code\"\n      }}>{`data Odd = Odd Int  deriving (Generic)\n\ninstance DecodeScalar Euro where\n  decodeScalar (Int x) = pure $ Odd (... )\n  decodeScalar _ = Left \"invalid Value!\"\n\ninstance EncodeScalar Euro where\n  encodeScalar (Odd value) = Int value\n\ninstance GQLType Odd where\n  type KIND Odd = SCALAR`}</code>{`\n        `}</deckgo-highlight-code>\n    <Section id=\"interfaces\" mdxType=\"Section\">Interfaces</Section>\n    <ol>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`defining interface with Haskell Types (runtime validation):`}</p>\n        <deckgo-highlight-code parentName=\"li\" {...{\n          \"language\": \"haskell\",\n          \"terminal\": \"carbon\",\n          \"theme\": \"one-dark\",\n          \"line-numbers\": \"true\"\n        }}>{`\n          `}<code parentName=\"deckgo-highlight-code\" {...{\n            \"slot\": \"code\"\n          }}>{`  -- interface is just regular type derived as interface\nnewtype Person m = Person {name ::  m Text}\n  deriving (Generic)\n\ninstance GQLType (Person m) where\n  type KIND (Person m) = INTERFACE\n\n-- with GQLType user can links interfaces to implementing object\ninstance GQLType Deity where\n  implements _ = [interface (Proxy @Person)]`}</code>{`\n        `}</deckgo-highlight-code>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`defining with `}<inlineCode parentName=\"p\">{`importGQLDocument`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`DSL`}</inlineCode>{` (compile time validation):`}</p>\n        <deckgo-highlight-code parentName=\"li\" {...{\n          \"language\": \"graphql\",\n          \"terminal\": \"carbon\",\n          \"theme\": \"one-dark\",\n          \"line-numbers\": \"true\"\n        }}>{`\n          `}<code parentName=\"deckgo-highlight-code\" {...{\n            \"slot\": \"code\"\n          }}>{`interface Account {\n  name: String!\n}\n\ntype User implements Account {\n  name: String!\n}`}</code>{`\n        `}</deckgo-highlight-code>\n      </li>\n    </ol>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}