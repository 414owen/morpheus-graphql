{"version":3,"file":"component---src-pages-index-mdx-c24061058f4a4b7ad6ea.js","mappings":"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","sources":["webpack://morpheus-graphql-docs/./src/pages/index.mdx"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/morpheus-graphql/morpheus-graphql/docs/src/components/layout.js\";\nimport { Link } from \"gatsby\";\nimport Layout from \"../components/layout\";\nimport SEO from \"../components/seo\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n\n    <SEO title=\"Home\" keywords={[\"Morpheus GraphQL\", \"GraphQL\", \"Haskell\"]} mdxType=\"SEO\" />\n    <h1>{`Morpheus GraphQL `}<a parentName=\"h1\" {...{\n        \"href\": \"https://hackage.haskell.org/package/morpheus-graphql\"\n      }}><img parentName=\"a\" {...{\n          \"src\": \"https://img.shields.io/hackage/v/morpheus-graphql.svg\",\n          \"alt\": \"Hackage\"\n        }}></img></a>{` `}<img parentName=\"h1\" {...{\n        \"src\": \"https://github.com/morpheusgraphql/morpheus-graphql/workflows/CI/badge.svg\",\n        \"alt\": \"CI\"\n      }}></img></h1>\n    <p>{`Build GraphQL APIs with your favorite functional language!`}</p>\n    <p>{`Morpheus GraphQL (Server & Client) helps you to build GraphQL APIs in Haskell with native Haskell types.\nMorpheus will convert your Haskell types to a GraphQL schema and all your resolvers are just native Haskell functions. Morpheus GraphQL can also convert your GraphQL Schema or Query to Haskell types and validate them in compile time.`}</p>\n    <p>{`Morpheus is still in an early stage of development, so any feedback is more than welcome, and we appreciate any contribution!\nJust open an issue here on GitHub, or join `}<a parentName=\"p\" {...{\n        \"href\": \"https://morpheus-graphql-slack-invite.herokuapp.com/\"\n      }}>{`our Slack channel`}</a>{` to get in touch.`}</p>\n    <h2>{`Getting Started`}</h2>\n    <h3>{`Setup`}</h3>\n    <p>{`To get started with Morpheus, you first need to add it to your project's dependencies, as follows (assuming you're using hpack):`}</p>\n    <p><em parentName=\"p\">{`package.yml`}</em></p>\n    <deckgo-highlight-code {...{\n      \"language\": \"yaml\",\n      \"terminal\": \"carbon\",\n      \"theme\": \"one-dark\",\n      \"line-numbers\": \"true\"\n    }}>{`\n          `}<code parentName=\"deckgo-highlight-code\" {...{\n        \"slot\": \"code\"\n      }}>{`dependencies:\n  - morpheus-graphql`}</code>{`\n        `}</deckgo-highlight-code>\n    <p>{`Additionally, you should tell stack which version to pick:`}</p>\n    <p><em parentName=\"p\">{`stack.yml`}</em></p>\n    <deckgo-highlight-code {...{\n      \"language\": \"yaml\",\n      \"terminal\": \"carbon\",\n      \"theme\": \"one-dark\",\n      \"line-numbers\": \"true\"\n    }}>{`\n          `}<code parentName=\"deckgo-highlight-code\" {...{\n        \"slot\": \"code\"\n      }}>{`resolver: lts-16.2\n\nextra-deps:\n  - morpheus-graphql-0.17.0`}</code>{`\n        `}</deckgo-highlight-code>\n    <p>{`As Morpheus is quite new, make sure stack can find morpheus-graphql by running `}<inlineCode parentName=\"p\">{`stack upgrade`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`stack update`}</inlineCode></p>\n    <h3>{`Building your first GraphQL API`}</h3>\n    <h3>{`with GraphQL syntax`}</h3>\n    <p><em parentName=\"p\">{`schema.gql`}</em></p>\n    <deckgo-highlight-code {...{\n      \"language\": \"graphql\",\n      \"terminal\": \"carbon\",\n      \"theme\": \"one-dark\",\n      \"line-numbers\": \"true\"\n    }}>{`\n          `}<code parentName=\"deckgo-highlight-code\" {...{\n        \"slot\": \"code\"\n      }}>{`type Query {\n  deity(name: String! = \"Morpheus\"): Deity!\n}\n\n\"\"\"\nDescription for Deity\n\"\"\"\ntype Deity {\n  \"\"\"\n  Description for name\n  \"\"\"\n  name: String!\n  power: String @deprecated(reason: \"some reason for\")\n}`}</code>{`\n        `}</deckgo-highlight-code>\n    <p><em parentName=\"p\">{`API.hs`}</em></p>\n    <deckgo-highlight-code {...{\n      \"language\": \"haskell\",\n      \"terminal\": \"carbon\",\n      \"theme\": \"one-dark\",\n      \"line-numbers\": \"true\"\n    }}>{`\n          `}<code parentName=\"deckgo-highlight-code\" {...{\n        \"slot\": \"code\"\n      }}>{`{-# LANGUAGE DeriveGeneric #-}\n{-# LANGUAGE DuplicateRecordFields #-}\n{-# LANGUAGE FlexibleContexts #-}\n{-# LANGUAGE FlexibleInstances #-}\n{-# LANGUAGE MultiParamTypeClasses #-}\n{-# LANGUAGE NamedFieldPuns #-}\n{-# LANGUAGE OverloadedStrings #-}\n{-# LANGUAGE ScopedTypeVariables #-}\n{-# LANGUAGE TemplateHaskell #-}\n{-# LANGUAGE TypeFamilies #-}\n\nmodule API (api) where\n\nimport Data.ByteString.Lazy.Char8 (ByteString)\nimport Data.Morpheus (interpreter)\nimport Data.Morpheus.Document (importGQLDocument)\nimport Data.Morpheus.Types (RootResolver (..), Undefined (..))\nimport Data.Text (Text)\n\nimportGQLDocument \"schema.gql\"\n\nrootResolver :: RootResolver IO () Query Undefined Undefined\nrootResolver =\n  RootResolver\n    { queryResolver = Query {deity},\n      mutationResolver = Undefined,\n      subscriptionResolver = Undefined\n    }\n  where\n    deity DeityArgs {name} =\n      pure\n        Deity\n          { name = pure name,\n            power = pure (Just \"Shapeshifting\")\n          }\n\napi :: ByteString -> IO ByteString\napi = interpreter rootResolver`}</code>{`\n        `}</deckgo-highlight-code>\n    <p>{`Template Haskell Generates types: `}<inlineCode parentName=\"p\">{`Query`}</inlineCode>{` , `}<inlineCode parentName=\"p\">{`Deity`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`DeityArgs`}</inlineCode>{`, that can be used by `}<inlineCode parentName=\"p\">{`rootResolver`}</inlineCode></p>\n    <p><inlineCode parentName=\"p\">{`descriptions`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`deprecations`}</inlineCode>{` will be displayed in introspection.`}</p>\n    <p><inlineCode parentName=\"p\">{`importGQLDocumentWithNamespace`}</inlineCode>{` will generate Types with namespaced fields. If you don't need namespace use `}<inlineCode parentName=\"p\">{`importGQLDocument`}</inlineCode></p>\n    <h3>{`with Native Haskell Types`}</h3>\n    <p>{`To define a GraphQL API with Morpheus we start by defining the API Schema as a native Haskell data type,\nwhich derives the `}<inlineCode parentName=\"p\">{`Generic`}</inlineCode>{` typeClass. Lazily resolvable fields on this `}<inlineCode parentName=\"p\">{`Query`}</inlineCode>{` type are defined via `}<inlineCode parentName=\"p\">{`a -> ResolverQ () IO b`}</inlineCode>{`, representing resolving a set of arguments `}<inlineCode parentName=\"p\">{`a`}</inlineCode>{` to a concrete value `}<inlineCode parentName=\"p\">{`b`}</inlineCode>{`.`}</p>\n    <deckgo-highlight-code {...{\n      \"language\": \"haskell\",\n      \"terminal\": \"carbon\",\n      \"theme\": \"one-dark\",\n      \"line-numbers\": \"true\"\n    }}>{`\n          `}<code parentName=\"deckgo-highlight-code\" {...{\n        \"slot\": \"code\"\n      }}>{`data Query m = Query\n  { deity :: DeityArgs -> m Deity\n  } deriving (Generic, GQLType)\n\ndata Deity = Deity\n  { fullName :: Text         -- Non-Nullable Field\n  , power    :: Maybe Text   -- Nullable Field\n  } deriving (Generic,GQLType)\n\ndata DeityArgs = DeityArgs\n  { name      :: Text        -- Required Argument\n  , mythology :: Maybe Text  -- Optional Argument\n  } deriving (Generic)`}</code>{`\n        `}</deckgo-highlight-code>\n    <p>{`For each field in the `}<inlineCode parentName=\"p\">{`Query`}</inlineCode>{` type defined via `}<inlineCode parentName=\"p\">{`a -> m b`}</inlineCode>{` (like `}<inlineCode parentName=\"p\">{`deity`}</inlineCode>{`) we will define a resolver implementation that provides the values during runtime by referring to\nsome data source, e.g. a database or another API. Fields that are defined without `}<inlineCode parentName=\"p\">{`a -> m b`}</inlineCode>{` you can just provide a value.`}</p>\n    <p>{`In above example, the field of `}<inlineCode parentName=\"p\">{`DeityArgs`}</inlineCode>{` could also be named using reserved identities (such as: `}<inlineCode parentName=\"p\">{`type`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`where`}</inlineCode>{`, etc), in order to avoid conflict, a prime symbol (`}<inlineCode parentName=\"p\">{`'`}</inlineCode>{`) must be attached. For example, you can have:`}</p>\n    <deckgo-highlight-code {...{\n      \"language\": \"haskell\",\n      \"terminal\": \"carbon\",\n      \"theme\": \"one-dark\",\n      \"line-numbers\": \"true\"\n    }}>{`\n          `}<code parentName=\"deckgo-highlight-code\" {...{\n        \"slot\": \"code\"\n      }}>{`data DeityArgs = DeityArgs\n  { name      :: Text        -- Required Argument\n  , mythology :: Maybe Text  -- Optional Argument\n  , type'     :: Text\n  } deriving (Generic)`}</code>{`\n        `}</deckgo-highlight-code>\n    <p>{`The field name in the final request will be `}<inlineCode parentName=\"p\">{`type`}</inlineCode>{` instead of `}<inlineCode parentName=\"p\">{`type'`}</inlineCode>{`. The Morpheus request parser converts each of the reserved identities in Haskell 2010 to their corresponding names internally. This also applies to selections.`}</p>\n    <deckgo-highlight-code {...{\n      \"language\": \"haskell\",\n      \"terminal\": \"carbon\",\n      \"theme\": \"one-dark\",\n      \"line-numbers\": \"true\"\n    }}>{`\n          `}<code parentName=\"deckgo-highlight-code\" {...{\n        \"slot\": \"code\"\n      }}>{`resolveDeity :: DeityArgs -> ResolverQ e () Deity\nresolveDeity DeityArgs { name, mythology } = liftEither $ dbDeity name mythology\n\naskDB :: Text -> Maybe Text -> IO (Either String Deity)\naskDB = ...`}</code>{`\n        `}</deckgo-highlight-code>\n    <p>{`To make this `}<inlineCode parentName=\"p\">{`Query`}</inlineCode>{` type available as an API, we define a `}<inlineCode parentName=\"p\">{`RootResolver`}</inlineCode>{` and feed it to the Morpheus `}<inlineCode parentName=\"p\">{`interpreter`}</inlineCode>{`. A `}<inlineCode parentName=\"p\">{`RootResolver`}</inlineCode>{` consists of `}<inlineCode parentName=\"p\">{`query`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`mutation`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`subscription`}</inlineCode>{` definitions, while we omit the latter for this example:`}</p>\n    <deckgo-highlight-code {...{\n      \"language\": \"haskell\",\n      \"terminal\": \"carbon\",\n      \"theme\": \"one-dark\",\n      \"line-numbers\": \"true\"\n    }}>{`\n          `}<code parentName=\"deckgo-highlight-code\" {...{\n        \"slot\": \"code\"\n      }}>{`rootResolver :: RootResolver IO () Query Undefined Undefined\nrootResolver =\n  RootResolver\n    { queryResolver = Query {deity = resolveDeity}\n    , mutationResolver = Undefined\n    , subscriptionResolver = Undefined\n    }\n\ngqlApi :: ByteString -> IO ByteString\ngqlApi = interpreter rootResolver`}</code>{`\n        `}</deckgo-highlight-code>\n    <p>{`As you can see, the API is defined as `}<inlineCode parentName=\"p\">{`ByteString -> IO ByteString`}</inlineCode>{` which we can either invoke directly or use inside an arbitrary web framework\nsuch as `}<inlineCode parentName=\"p\">{`scotty`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`serverless-haskell`}</inlineCode>{`. We'll go for `}<inlineCode parentName=\"p\">{`scotty`}</inlineCode>{` in this example:`}</p>\n    <deckgo-highlight-code {...{\n      \"language\": \"haskell\",\n      \"terminal\": \"carbon\",\n      \"theme\": \"one-dark\",\n      \"line-numbers\": \"true\"\n    }}>{`\n          `}<code parentName=\"deckgo-highlight-code\" {...{\n        \"slot\": \"code\"\n      }}>{`main :: IO ()\nmain = scotty 3000 $ post \"/api\" $ raw =<< (liftIO . gqlApi =<< body)`}</code>{`\n        `}</deckgo-highlight-code>\n    <p>{`If we now send a POST request to `}<inlineCode parentName=\"p\">{`http://localhost:3000/api`}</inlineCode>{` with a GraphQL Query as body for example in a tool like `}<inlineCode parentName=\"p\">{`Insomnia`}</inlineCode>{`:`}</p>\n    <deckgo-highlight-code {...{\n      \"language\": \"graphql\",\n      \"terminal\": \"carbon\",\n      \"theme\": \"one-dark\",\n      \"line-numbers\": \"true\"\n    }}>{`\n          `}<code parentName=\"deckgo-highlight-code\" {...{\n        \"slot\": \"code\"\n      }}>{`query GetDeity {\n  deity(name: \"Morpheus\") {\n    fullName\n    power\n  }\n}`}</code>{`\n        `}</deckgo-highlight-code>\n    <p>{`our query will be resolved!`}</p>\n    <deckgo-highlight-code {...{\n      \"language\": \"json\",\n      \"terminal\": \"carbon\",\n      \"theme\": \"one-dark\",\n      \"line-numbers\": \"true\"\n    }}>{`\n          `}<code parentName=\"deckgo-highlight-code\" {...{\n        \"slot\": \"code\"\n      }}>{`{\n  \"data\": {\n    \"deity\": {\n      \"fullName\": \"Morpheus\",\n      \"power\": \"Shapeshifting\"\n    }\n  }\n}`}</code>{`\n        `}</deckgo-highlight-code>\n    <h2>{`Advanced topics`}</h2>\n    <h3>{`Applicative and Monad instance`}</h3>\n    <p>{`The `}<inlineCode parentName=\"p\">{`Resolver`}</inlineCode>{` type has `}<inlineCode parentName=\"p\">{`Applicative`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`Monad`}</inlineCode>{` instances that can be used to compose resolvers.`}</p>\n    <h3>{`Introspection`}</h3>\n    <p>{`Morpheus converts your schema to a GraphQL introspection automatically. You can use tools like `}<inlineCode parentName=\"p\">{`Insomnia`}</inlineCode>{` to take a\nlook at the introspection and validate your schema.\nIf you need a description for your GQLType inside of the introspection you can define the GQLType instance manually\nand provide an implementation for the `}<inlineCode parentName=\"p\">{`description`}</inlineCode>{` function:`}</p>\n    <deckgo-highlight-code {...{\n      \"language\": \"haskell\",\n      \"terminal\": \"carbon\",\n      \"theme\": \"one-dark\",\n      \"line-numbers\": \"true\"\n    }}>{`\n          `}<code parentName=\"deckgo-highlight-code\" {...{\n        \"slot\": \"code\"\n      }}>{`data Deity = Deity\n{ ...\n} deriving (Generic)\n\ninstance GQLType Deity where\n  description = const \"A supernatural being considered divine and sacred\"`}</code>{`\n        `}</deckgo-highlight-code>\n    <p>{`screenshots from `}<inlineCode parentName=\"p\">{`Insomnia`}</inlineCode></p>\n    <p><img parentName=\"p\" {...{\n        \"src\": \"https://morpheusgraphql.com/assets/img/introspection/spelling.png\",\n        \"alt\": \"alt text\",\n        \"title\": \"spelling\"\n      }}></img>{`\n`}<img parentName=\"p\" {...{\n        \"src\": \"https://morpheusgraphql.com/assets/img/introspection/autocomplete.png\",\n        \"alt\": \"alt text\",\n        \"title\": \"autocomplete\"\n      }}></img>{`\n`}<img parentName=\"p\" {...{\n        \"src\": \"https://morpheusgraphql.com/assets/img/introspection/type.png\",\n        \"alt\": \"alt text\",\n        \"title\": \"type\"\n      }}></img></p>\n    <h2>{`Handling Errors`}</h2>\n    <p>{`for errors you can use use either `}<inlineCode parentName=\"p\">{`liftEither`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`MonadFail`}</inlineCode>{`:\nat the and they have same result.`}</p>\n    <p>{`with `}<inlineCode parentName=\"p\">{`liftEither`}</inlineCode></p>\n    <deckgo-highlight-code {...{\n      \"language\": \"haskell\",\n      \"terminal\": \"carbon\",\n      \"theme\": \"one-dark\",\n      \"line-numbers\": \"true\"\n    }}>{`\n          `}<code parentName=\"deckgo-highlight-code\" {...{\n        \"slot\": \"code\"\n      }}>{`resolveDeity :: DeityArgs -> ResolverQ e IO Deity\nresolveDeity DeityArgs {} = liftEither $ dbDeity\n\ndbDeity ::  IO Either Deity\ndbDeity = pure $ Left \"db error\"`}</code>{`\n        `}</deckgo-highlight-code>\n    <p>{`with `}<inlineCode parentName=\"p\">{`MonadFail`}</inlineCode></p>\n    <deckgo-highlight-code {...{\n      \"language\": \"haskell\",\n      \"terminal\": \"carbon\",\n      \"theme\": \"one-dark\",\n      \"line-numbers\": \"true\"\n    }}>{`\n          `}<code parentName=\"deckgo-highlight-code\" {...{\n        \"slot\": \"code\"\n      }}>{`resolveDeity :: DeityArgs -> ResolverQ e IO Deity\nresolveDeity DeityArgs { } = fail \"db error\"`}</code>{`\n        `}</deckgo-highlight-code>\n    <h2>{`Morpheus CLI for Code Generating`}</h2>\n    <p>{`you should use `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/morpheusgraphql/morpheus-graphql-cli\"\n      }}>{`morpheus-graphql-cli`}</a></p>\n    <h2>{`Roadmap`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`Medium future:`}\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`Stabilize API`}</li>\n          <li parentName=\"ul\">{`Specification-isomorphic error handling`}</li>\n        </ul>\n      </li>\n      <li parentName=\"ul\">{`Long term:`}\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`Support all possible GQL features`}</li>\n          <li parentName=\"ul\">{`Performance optimization`}</li>\n        </ul>\n      </li>\n    </ul>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","title","keywords","parentName","isMDXComponent"],"sourceRoot":""}