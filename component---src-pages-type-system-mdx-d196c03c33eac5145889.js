(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{SbVP:function(e,n,t){"use strict";t.r(n),t.d(n,"_frontmatter",(function(){return l})),t.d(n,"default",(function(){return b}));var a=t("zLVn"),i=(t("q1tI"),t("7ljp")),r=t("Bl7J"),o=t("vrFN"),c=["components"],l={},p={_frontmatter:l},d=r.a;function b(e){var n=e.components,t=Object(a.a)(e,c);return Object(i.b)(d,Object.assign({},p,t,{components:n,mdxType:"MDXLayout"}),Object(i.b)(o.a,{title:"Type System",keywords:["Morpheus GraphQL","GraphQL","Haskell","Type System"],mdxType:"SEO"}),Object(i.b)("h1",null,"Type System"),Object(i.b)("h3",null,"Enums"),Object(i.b)("p",null,"You can use Union Types as Enums, but they're not allowed to have any parameters."),Object(i.b)("deckgo-highlight-code",{language:"haskell",terminal:"carbon",theme:"one-dark","line-numbers":"true"},"\n          ",Object(i.b)("code",{parentName:"deckgo-highlight-code",slot:"code"},"data City\n  = Athens\n  | Sparta\n  | Corinth\n  | Delphi\n  | Argos\n  deriving (Generic)\n\ninstance GQLType City where\n  type KIND City = ENUM"),"\n        "),Object(i.b)("h2",null,"Union types"),Object(i.b)("p",null,"To use union type, all you have to do is derive the ",Object(i.b)("inlineCode",{parentName:"p"},"GQLType")," class. Using GraphQL ",Object(i.b)("a",{parentName:"p",href:"https://graphql.org/learn/queries/#fragments"},Object(i.b)("em",{parentName:"a"},"fragments")),", the arguments of each data constructor can be accessed from the GraphQL client."),Object(i.b)("deckgo-highlight-code",{language:"haskell",terminal:"carbon",theme:"one-dark","line-numbers":"true"},"\n          ",Object(i.b)("code",{parentName:"deckgo-highlight-code",slot:"code"},"data Character\n  = CharacterDeity Deity -- will be unwrapped, since Character + Deity = CharacterDeity\n  | SomeDeity Deity -- will be wrapped since Character + Deity != SomeDeity\n  | Creature { creatureName :: Text, creatureAge :: Int }\n  | Demigod Text Text\n  | Zeus\n  deriving (Generic, GQLType)"),"\n        "),Object(i.b)("p",null,"where ",Object(i.b)("inlineCode",{parentName:"p"},"Deity")," is an object."),Object(i.b)("p",null,"As we see, there are different kinds of unions. ",Object(i.b)("inlineCode",{parentName:"p"},"Morpheus")," handles them all."),Object(i.b)("p",null,"This type will be represented as"),Object(i.b)("deckgo-highlight-code",{language:"graphql",terminal:"carbon",theme:"one-dark","line-numbers":"true"},"\n          ",Object(i.b)("code",{parentName:"deckgo-highlight-code",slot:"code"},"union Character = Deity | SomeDeity | Creature | SomeMulti | Zeus\n\ntype SomeDeity {\n  _0: Deity!\n}\n\ntype Creature {\n  creatureName: String!\n  creatureAge: Int!\n}\n\ntype Demigod {\n  _0: Int!\n  _1: String!\n}\n\ntype Zeus {\n  _: Unit!\n}"),"\n        "),Object(i.b)("p",null,"By default, union members will be generated with wrapper objects.\nThere is one exception to this: if a constructor of a type is the type name concatenated with the name of the contained type, it will be referenced directly.\nThat is, given:"),Object(i.b)("deckgo-highlight-code",{language:"haskell",terminal:"carbon",theme:"one-dark","line-numbers":"true"},"\n          ",Object(i.b)("code",{parentName:"deckgo-highlight-code",slot:"code"},"data Song = { songName :: Text, songDuration :: Float } deriving (Generic, GQLType)\n\ndata Skit = { skitName :: Text, skitDuration :: Float } deriving (Generic, GQLType)\n\ndata WrappedNode\n  = WrappedSong Song\n  | WrappedSkit Skit\n  deriving (Generic, GQLType)\n\ndata NonWrapped\n  = NonWrappedSong Song\n  | NonWrappedSkit Skit\n  deriving (Generic, GQLType)\n"),"\n        "),Object(i.b)("p",null,"You will get the following schema:"),Object(i.b)("deckgo-highlight-code",{language:"graphql",terminal:"carbon",theme:"one-dark","line-numbers":"true"},"\n          ",Object(i.b)("code",{parentName:"deckgo-highlight-code",slot:"code"},"# has wrapper types\nunion WrappedNode = WrappedSong | WrappedSkit\n\n# is a direct union\nunion NonWrapped = Song | Skit\n\ntype WrappedSong {\n  _0: Song!\n}\n\ntype WrappedSKit {\n  _0: Skit!\n}\n\ntype Song {\n  songDuration: Float!\n  songName: String!\n}\n\ntype Skit {\n  skitDuration: Float!\n  skitName: String!\n}"),"\n        "),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"for all other unions will be generated new object type. for types without record syntax, fields will be automatically indexed.")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"all empty constructors in union will be summed in type ",Object(i.b)("inlineCode",{parentName:"p"},"<tyConName>Enum")," (e.g ",Object(i.b)("inlineCode",{parentName:"p"},"CharacterEnum"),"), this enum will be wrapped in ",Object(i.b)("inlineCode",{parentName:"p"},"CharacterEnumObject")," and added to union members."))),Object(i.b)("h2",null,"Scalar types"),Object(i.b)("p",null,"To use custom scalar types, you need to provide implementations for ",Object(i.b)("inlineCode",{parentName:"p"},"parseValue")," and ",Object(i.b)("inlineCode",{parentName:"p"},"serialize")," respectively."),Object(i.b)("deckgo-highlight-code",{language:"haskell",terminal:"carbon",theme:"one-dark","line-numbers":"true"},"\n          ",Object(i.b)("code",{parentName:"deckgo-highlight-code",slot:"code"},'data Odd = Odd Int  deriving (Generic)\n\ninstance DecodeScalar Euro where\n  decodeScalar (Int x) = pure $ Odd (... )\n  decodeScalar _ = Left "invalid Value!"\n\ninstance EncodeScalar Euro where\n  encodeScalar (Odd value) = Int value\n\ninstance GQLType Odd where\n  type KIND Odd = SCALAR'),"\n        "),Object(i.b)("h3",null,"Interface"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},Object(i.b)("p",{parentName:"li"},"defining interface with Haskell Types (runtime validation):"),Object(i.b)("deckgo-highlight-code",{parentName:"li",language:"haskell",terminal:"carbon",theme:"one-dark","line-numbers":"true"},"\n          ",Object(i.b)("code",{parentName:"deckgo-highlight-code",slot:"code"},"  -- interface is just regular type derived as interface\nnewtype Person m = Person {name ::  m Text}\n  deriving (Generic)\n\ninstance GQLType (Person m) where\n  type KIND (Person m) = INTERFACE\n\n-- with GQLType user can links interfaces to implementing object\ninstance GQLType Deity where\n  implements _ = [interface (Proxy @Person)]"),"\n        ")),Object(i.b)("li",{parentName:"ol"},Object(i.b)("p",{parentName:"li"},"defining with ",Object(i.b)("inlineCode",{parentName:"p"},"importGQLDocument")," and ",Object(i.b)("inlineCode",{parentName:"p"},"DSL")," (compile time validation):"),Object(i.b)("deckgo-highlight-code",{parentName:"li",language:"graphql",terminal:"carbon",theme:"one-dark","line-numbers":"true"},"\n          ",Object(i.b)("code",{parentName:"deckgo-highlight-code",slot:"code"},"interface Account {\n  name: String!\n}\n\ntype User implements Account {\n  name: String!\n}"),"\n        "))))}b.isMDXComponent=!0},zLVn:function(e,n,t){"use strict";function a(e,n){if(null==e)return{};var t,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}t.d(n,"a",(function(){return a}))}}]);
//# sourceMappingURL=component---src-pages-type-system-mdx-d196c03c33eac5145889.js.map