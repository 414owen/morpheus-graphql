{"version":3,"sources":["webpack:///./src/pages/client.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","title","keywords","parentName","isMDXComponent"],"mappings":"sRAWaA,EAAe,GACtBC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,iBACD,OAAO,YAACJ,EAAD,iBAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAK5E,YAAC,IAAD,CAAKC,MAAM,0BAA0BC,SAAU,CAAC,4BAA6B,yBAA0B,eAAgBF,QAAQ,QAC/H,mFACA,qCACE,SAAY,KACZ,SAAY,SACZ,MAAS,WACT,eAAgB,QAJlB,eAMQ,oBAAMG,WAAW,wBACrB,KAAQ,QADJ,4QANR,cAuBA,qCACA,qCACE,SAAY,UACZ,SAAY,SACZ,MAAS,WACT,eAAgB,QAJlB,eAMQ,oBAAMA,WAAW,wBACrB,KAAQ,QADJ,iLANR,cAwBA,0DACA,sBACE,kBAAIA,WAAW,MAAf,0CACA,kBAAIA,WAAW,MAAf,gBAAqC,0BAAYA,WAAW,MAAvB,SAArC,eAEF,qCACE,SAAY,UACZ,SAAY,SACZ,MAAS,WACT,eAAgB,QAJlB,eAMQ,oBAAMA,WAAW,wBACrB,KAAQ,QADJ,gdANR,cAqCA,mGAAkF,0BAAYA,WAAW,KAAvB,SAAlF,KACA,6BAAY,0BAAYA,WAAW,KAAvB,SAAZ,sCAAoG,0BAAYA,WAAW,KAAvB,WAApG,KACA,qCACE,SAAY,UACZ,SAAY,SACZ,MAAS,WACT,eAAgB,QAJlB,eAMQ,oBAAMA,WAAW,wBACrB,KAAQ,QADJ,0QANR,cAeA,sCAAqB,0BAAYA,WAAW,KAAvB,WAArB,qDAA8H,0BAAYA,WAAW,KAAvB,KAA9H,KACA,0BAAS,0BAAYA,WAAW,KAAvB,SAAT,oCAA+F,iBAAGA,WAAW,IACzG,KAAQ,4BADmF,cAA/F,iCAGA,qCACE,SAAY,UACZ,SAAY,SACZ,MAAS,WACT,eAAgB,QAJlB,eAMQ,oBAAMA,WAAW,wBACrB,KAAQ,QADJ,uZANR,cAmBA,sFACA,oDAAmC,0BAAYA,WAAW,KAAvB,iBAAnC,SACA,qCACE,SAAY,UACZ,SAAY,SACZ,MAAS,WACT,eAAgB,QAJlB,eAMQ,oBAAMA,WAAW,wBACrB,KAAQ,QADJ,oDANR,eAcJN,EAAWO,gBAAiB","file":"component---src-pages-client-mdx-0a947a27bcd740648fdd.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/morpheus-graphql/morpheus-graphql/docs/src/components/layout.js\";\nimport { Link } from \"gatsby\";\nimport Layout from \"../components/layout\";\nimport SEO from \"../components/seo\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n\n    <SEO title=\"Morpheus GraphQL Client\" keywords={[\"Morpheus GraphQL Examples\", \"GraphQL Haskell Client\", \"Type System\"]} mdxType=\"SEO\" />\n    <h2>{`Morpheus GraphQL Client with Template haskell QuasiQuotes`}</h2>\n    <deckgo-highlight-code {...{\n      \"language\": \"hs\",\n      \"terminal\": \"carbon\",\n      \"theme\": \"one-dark\",\n      \"line-numbers\": \"true\"\n    }}>{`\n          `}<code parentName=\"deckgo-highlight-code\" {...{\n        \"slot\": \"code\"\n      }}>{`defineByDocumentFile\n    \"./schema.gql\"\n  [gql|\n    query GetHero ($character: Character)\n      {\n        deity (fatherOf:$character) {\n          name\n          power\n          worships {\n            deity2Name: name\n          }\n        }\n      }\n  |]`}</code>{`\n        `}</deckgo-highlight-code>\n    <p>{`with schema:`}</p>\n    <deckgo-highlight-code {...{\n      \"language\": \"graphql\",\n      \"terminal\": \"carbon\",\n      \"theme\": \"one-dark\",\n      \"line-numbers\": \"true\"\n    }}>{`\n          `}<code parentName=\"deckgo-highlight-code\" {...{\n        \"slot\": \"code\"\n      }}>{`input Character {\n  name: String!\n}\n\ntype Deity {\n  name: String!\n  worships: Deity\n  power: Power!\n}\n\nenum Power {\n  Lightning\n  Teleportation\n  Omniscience\n}`}</code>{`\n        `}</deckgo-highlight-code>\n    <p>{`will validate query and Generate:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`namespaced response and variable types`}</li>\n      <li parentName=\"ul\">{`instance for `}<inlineCode parentName=\"li\">{`Fetch`}</inlineCode>{` typeClass`}</li>\n    </ul>\n    <deckgo-highlight-code {...{\n      \"language\": \"haskell\",\n      \"terminal\": \"carbon\",\n      \"theme\": \"one-dark\",\n      \"line-numbers\": \"true\"\n    }}>{`\n          `}<code parentName=\"deckgo-highlight-code\" {...{\n        \"slot\": \"code\"\n      }}>{`data GetHero = GetHero {\n  deity: DeityDeity\n}\n\n-- from: {user\ndata DeityDeity = DeityDeity {\n  name: Text,\n  worships: Maybe DeityWorshipsDeity\n  power: Power\n}\n\n-- from: {deity{worships\ndata DeityWorshipsDeity = DeityWorshipsDeity {\n  name: Text,\n}\n\ndata Power =\n    PowerLightning\n  | PowerTeleportation\n  | PowerOmniscience\n\ndata GetHeroArgs = GetHeroArgs {\n  character: Character\n}\n\ndata Character = Character {\n  name: Person\n}`}</code>{`\n        `}</deckgo-highlight-code>\n    <p>{`as you see, response type field name collision can be handled with GraphQL `}<inlineCode parentName=\"p\">{`alias`}</inlineCode>{`.`}</p>\n    <p>{`with `}<inlineCode parentName=\"p\">{`fetch`}</inlineCode>{` you can fetch well typed response `}<inlineCode parentName=\"p\">{`GetHero`}</inlineCode>{`.`}</p>\n    <deckgo-highlight-code {...{\n      \"language\": \"haskell\",\n      \"terminal\": \"carbon\",\n      \"theme\": \"one-dark\",\n      \"line-numbers\": \"true\"\n    }}>{`\n          `}<code parentName=\"deckgo-highlight-code\" {...{\n        \"slot\": \"code\"\n      }}>{`  fetchHero :: Args GetHero -> m (Either (FetchError GetHero) GetHero)\n  fetchHero = fetch jsonRes args\n      where\n        args = GetHeroArgs {character = Person {name = \"Zeus\"}}\n        jsonRes :: ByteString -> m ByteString\n        jsonRes = <GraphQL APi>`}</code>{`\n        `}</deckgo-highlight-code>\n    <p>{`in this case, `}<inlineCode parentName=\"p\">{`jsonRes`}</inlineCode>{` resolves a request into a response in some monad `}<inlineCode parentName=\"p\">{`m`}</inlineCode>{`.`}</p>\n    <p>{`A `}<inlineCode parentName=\"p\">{`fetch`}</inlineCode>{` resolver implementation against `}<a parentName=\"p\" {...{\n        \"href\": \"https://swapi.graph.cool\"\n      }}>{`a real API`}</a>{` may look like the following:`}</p>\n    <deckgo-highlight-code {...{\n      \"language\": \"haskell\",\n      \"terminal\": \"carbon\",\n      \"theme\": \"one-dark\",\n      \"line-numbers\": \"true\"\n    }}>{`\n          `}<code parentName=\"deckgo-highlight-code\" {...{\n        \"slot\": \"code\"\n      }}>{`{-# LANGUAGE OverloadedStrings #-}\n\nimport Data.ByteString.Lazy (ByteString)\nimport qualified Data.ByteString.Char8 as C8\nimport Network.HTTP.Req\n\nresolver :: String -> ByteString -> IO ByteString\nresolver tok b = runReq defaultHttpConfig $ do\n    let headers = header \"Content-Type\" \"application/json\"\n    responseBody <$> req POST (https \"swapi.graph.cool\") (ReqBodyLbs b) lbsResponse headers`}</code>{`\n        `}</deckgo-highlight-code>\n    <p>{`this is demonstrated in examples/src/Client/StarWarsClient.hs`}</p>\n    <p>{`types can be generated from `}<inlineCode parentName=\"p\">{`introspection`}</inlineCode>{` too:`}</p>\n    <deckgo-highlight-code {...{\n      \"language\": \"haskell\",\n      \"terminal\": \"carbon\",\n      \"theme\": \"one-dark\",\n      \"line-numbers\": \"true\"\n    }}>{`\n          `}<code parentName=\"deckgo-highlight-code\" {...{\n        \"slot\": \"code\"\n      }}>{`defineByIntrospectionFile \"./introspection.json\"`}</code>{`\n        `}</deckgo-highlight-code>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}