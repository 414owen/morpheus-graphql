{"version":3,"sources":["webpack:///./src/pages/index.mdx","webpack:///./node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","title","keywords","parentName","isMDXComponent","_objectWithoutPropertiesLoose","source","excluded","key","i","target","sourceKeys","Object","keys","length","indexOf"],"mappings":"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","file":"component---src-pages-index-mdx-4ac8ab9dce6a58b92695.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/morpheus-graphql/morpheus-graphql/docs/src/components/layout.js\";\nimport { Link } from \"gatsby\";\nimport Layout from \"../components/layout\";\nimport SEO from \"../components/seo\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n\n    <SEO title=\"Home\" keywords={[\"Morpheus GraphQL\", \"GraphQL\", \"Haskell\"]} mdxType=\"SEO\" />\n    <h1>{`Morpheus GraphQL `}<a parentName=\"h1\" {...{\n        \"href\": \"https://hackage.haskell.org/package/morpheus-graphql\"\n      }}><img parentName=\"a\" {...{\n          \"src\": \"https://img.shields.io/hackage/v/morpheus-graphql.svg\",\n          \"alt\": \"Hackage\"\n        }}></img></a>{` `}<img parentName=\"h1\" {...{\n        \"src\": \"https://github.com/morpheusgraphql/morpheus-graphql/workflows/CI/badge.svg\",\n        \"alt\": \"CI\"\n      }}></img></h1>\n    <p>{`Build GraphQL APIs with your favorite functional language!`}</p>\n    <p>{`Morpheus GraphQL (Server & Client) helps you to build GraphQL APIs in Haskell with native Haskell types.\nMorpheus will convert your Haskell types to a GraphQL schema and all your resolvers are just native Haskell functions. Morpheus GraphQL can also convert your GraphQL Schema or Query to Haskell types and validate them in compile time.`}</p>\n    <p>{`Morpheus is still in an early stage of development, so any feedback is more than welcome, and we appreciate any contribution!\nJust open an issue here on GitHub, or join `}<a parentName=\"p\" {...{\n        \"href\": \"https://morpheus-graphql-slack-invite.herokuapp.com/\"\n      }}>{`our Slack channel`}</a>{` to get in touch.`}</p>\n    <h2>{`Getting Started`}</h2>\n    <h3>{`Setup`}</h3>\n    <p>{`To get started with Morpheus, you first need to add it to your project's dependencies, as follows (assuming you're using hpack):`}</p>\n    <p><em parentName=\"p\">{`package.yml`}</em></p>\n    <deckgo-highlight-code {...{\n      \"language\": \"yaml\",\n      \"terminal\": \"carbon\",\n      \"theme\": \"one-dark\",\n      \"line-numbers\": \"true\"\n    }}>{`\n          `}<code parentName=\"deckgo-highlight-code\" {...{\n        \"slot\": \"code\"\n      }}>{`dependencies:\n  - morpheus-graphql`}</code>{`\n        `}</deckgo-highlight-code>\n    <p>{`Additionally, you should tell stack which version to pick:`}</p>\n    <p><em parentName=\"p\">{`stack.yml`}</em></p>\n    <deckgo-highlight-code {...{\n      \"language\": \"yaml\",\n      \"terminal\": \"carbon\",\n      \"theme\": \"one-dark\",\n      \"line-numbers\": \"true\"\n    }}>{`\n          `}<code parentName=\"deckgo-highlight-code\" {...{\n        \"slot\": \"code\"\n      }}>{`resolver: lts-16.2\n\nextra-deps:\n  - morpheus-graphql-0.17.0`}</code>{`\n        `}</deckgo-highlight-code>\n    <p>{`As Morpheus is quite new, make sure stack can find morpheus-graphql by running `}<inlineCode parentName=\"p\">{`stack upgrade`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`stack update`}</inlineCode></p>\n    <h3>{`Building your first GraphQL API`}</h3>\n    <h3>{`with GraphQL syntax`}</h3>\n    <p><em parentName=\"p\">{`schema.gql`}</em></p>\n    <deckgo-highlight-code {...{\n      \"language\": \"graphql\",\n      \"terminal\": \"carbon\",\n      \"theme\": \"one-dark\",\n      \"line-numbers\": \"true\"\n    }}>{`\n          `}<code parentName=\"deckgo-highlight-code\" {...{\n        \"slot\": \"code\"\n      }}>{`type Query {\n  deity(name: String! = \"Morpheus\"): Deity!\n}\n\n\"\"\"\nDescription for Deity\n\"\"\"\ntype Deity {\n  \"\"\"\n  Description for name\n  \"\"\"\n  name: String!\n  power: String @deprecated(reason: \"some reason for\")\n}`}</code>{`\n        `}</deckgo-highlight-code>\n    <p><em parentName=\"p\">{`API.hs`}</em></p>\n    <deckgo-highlight-code {...{\n      \"language\": \"haskell\",\n      \"terminal\": \"carbon\",\n      \"theme\": \"one-dark\",\n      \"line-numbers\": \"true\"\n    }}>{`\n          `}<code parentName=\"deckgo-highlight-code\" {...{\n        \"slot\": \"code\"\n      }}>{`{-# LANGUAGE DeriveGeneric #-}\n{-# LANGUAGE DuplicateRecordFields #-}\n{-# LANGUAGE FlexibleContexts #-}\n{-# LANGUAGE FlexibleInstances #-}\n{-# LANGUAGE MultiParamTypeClasses #-}\n{-# LANGUAGE NamedFieldPuns #-}\n{-# LANGUAGE OverloadedStrings #-}\n{-# LANGUAGE ScopedTypeVariables #-}\n{-# LANGUAGE TemplateHaskell #-}\n{-# LANGUAGE TypeFamilies #-}\n\nmodule API (api) where\n\nimport Data.ByteString.Lazy.Char8 (ByteString)\nimport Data.Morpheus (interpreter)\nimport Data.Morpheus.Document (importGQLDocument)\nimport Data.Morpheus.Types (RootResolver (..), Undefined (..))\nimport Data.Text (Text)\n\nimportGQLDocument \"schema.gql\"\n\nrootResolver :: RootResolver IO () Query Undefined Undefined\nrootResolver =\n  RootResolver\n    { queryResolver = Query {deity},\n      mutationResolver = Undefined,\n      subscriptionResolver = Undefined\n    }\n  where\n    deity DeityArgs {name} =\n      pure\n        Deity\n          { name = pure name,\n            power = pure (Just \"Shapeshifting\")\n          }\n\napi :: ByteString -> IO ByteString\napi = interpreter rootResolver`}</code>{`\n        `}</deckgo-highlight-code>\n    <p>{`Template Haskell Generates types: `}<inlineCode parentName=\"p\">{`Query`}</inlineCode>{` , `}<inlineCode parentName=\"p\">{`Deity`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`DeityArgs`}</inlineCode>{`, that can be used by `}<inlineCode parentName=\"p\">{`rootResolver`}</inlineCode></p>\n    <p><inlineCode parentName=\"p\">{`descriptions`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`deprecations`}</inlineCode>{` will be displayed in introspection.`}</p>\n    <p><inlineCode parentName=\"p\">{`importGQLDocumentWithNamespace`}</inlineCode>{` will generate Types with namespaced fields. If you don't need namespace use `}<inlineCode parentName=\"p\">{`importGQLDocument`}</inlineCode></p>\n    <h3>{`with Native Haskell Types`}</h3>\n    <p>{`To define a GraphQL API with Morpheus we start by defining the API Schema as a native Haskell data type,\nwhich derives the `}<inlineCode parentName=\"p\">{`Generic`}</inlineCode>{` typeClass. Lazily resolvable fields on this `}<inlineCode parentName=\"p\">{`Query`}</inlineCode>{` type are defined via `}<inlineCode parentName=\"p\">{`a -> ResolverQ () IO b`}</inlineCode>{`, representing resolving a set of arguments `}<inlineCode parentName=\"p\">{`a`}</inlineCode>{` to a concrete value `}<inlineCode parentName=\"p\">{`b`}</inlineCode>{`.`}</p>\n    <deckgo-highlight-code {...{\n      \"language\": \"haskell\",\n      \"terminal\": \"carbon\",\n      \"theme\": \"one-dark\",\n      \"line-numbers\": \"true\"\n    }}>{`\n          `}<code parentName=\"deckgo-highlight-code\" {...{\n        \"slot\": \"code\"\n      }}>{`data Query m = Query\n  { deity :: DeityArgs -> m Deity\n  } deriving (Generic, GQLType)\n\ndata Deity = Deity\n  { fullName :: Text         -- Non-Nullable Field\n  , power    :: Maybe Text   -- Nullable Field\n  } deriving (Generic,GQLType)\n\ndata DeityArgs = DeityArgs\n  { name      :: Text        -- Required Argument\n  , mythology :: Maybe Text  -- Optional Argument\n  } deriving (Generic)`}</code>{`\n        `}</deckgo-highlight-code>\n    <p>{`For each field in the `}<inlineCode parentName=\"p\">{`Query`}</inlineCode>{` type defined via `}<inlineCode parentName=\"p\">{`a -> m b`}</inlineCode>{` (like `}<inlineCode parentName=\"p\">{`deity`}</inlineCode>{`) we will define a resolver implementation that provides the values during runtime by referring to\nsome data source, e.g. a database or another API. Fields that are defined without `}<inlineCode parentName=\"p\">{`a -> m b`}</inlineCode>{` you can just provide a value.`}</p>\n    <p>{`In above example, the field of `}<inlineCode parentName=\"p\">{`DeityArgs`}</inlineCode>{` could also be named using reserved identities (such as: `}<inlineCode parentName=\"p\">{`type`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`where`}</inlineCode>{`, etc), in order to avoid conflict, a prime symbol (`}<inlineCode parentName=\"p\">{`'`}</inlineCode>{`) must be attached. For example, you can have:`}</p>\n    <deckgo-highlight-code {...{\n      \"language\": \"haskell\",\n      \"terminal\": \"carbon\",\n      \"theme\": \"one-dark\",\n      \"line-numbers\": \"true\"\n    }}>{`\n          `}<code parentName=\"deckgo-highlight-code\" {...{\n        \"slot\": \"code\"\n      }}>{`data DeityArgs = DeityArgs\n  { name      :: Text        -- Required Argument\n  , mythology :: Maybe Text  -- Optional Argument\n  , type'     :: Text\n  } deriving (Generic)`}</code>{`\n        `}</deckgo-highlight-code>\n    <p>{`The field name in the final request will be `}<inlineCode parentName=\"p\">{`type`}</inlineCode>{` instead of `}<inlineCode parentName=\"p\">{`type'`}</inlineCode>{`. The Morpheus request parser converts each of the reserved identities in Haskell 2010 to their corresponding names internally. This also applies to selections.`}</p>\n    <deckgo-highlight-code {...{\n      \"language\": \"haskell\",\n      \"terminal\": \"carbon\",\n      \"theme\": \"one-dark\",\n      \"line-numbers\": \"true\"\n    }}>{`\n          `}<code parentName=\"deckgo-highlight-code\" {...{\n        \"slot\": \"code\"\n      }}>{`resolveDeity :: DeityArgs -> ResolverQ e () Deity\nresolveDeity DeityArgs { name, mythology } = liftEither $ dbDeity name mythology\n\naskDB :: Text -> Maybe Text -> IO (Either String Deity)\naskDB = ...`}</code>{`\n        `}</deckgo-highlight-code>\n    <p>{`To make this `}<inlineCode parentName=\"p\">{`Query`}</inlineCode>{` type available as an API, we define a `}<inlineCode parentName=\"p\">{`RootResolver`}</inlineCode>{` and feed it to the Morpheus `}<inlineCode parentName=\"p\">{`interpreter`}</inlineCode>{`. A `}<inlineCode parentName=\"p\">{`RootResolver`}</inlineCode>{` consists of `}<inlineCode parentName=\"p\">{`query`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`mutation`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`subscription`}</inlineCode>{` definitions, while we omit the latter for this example:`}</p>\n    <deckgo-highlight-code {...{\n      \"language\": \"haskell\",\n      \"terminal\": \"carbon\",\n      \"theme\": \"one-dark\",\n      \"line-numbers\": \"true\"\n    }}>{`\n          `}<code parentName=\"deckgo-highlight-code\" {...{\n        \"slot\": \"code\"\n      }}>{`rootResolver :: RootResolver IO () Query Undefined Undefined\nrootResolver =\n  RootResolver\n    { queryResolver = Query {deity = resolveDeity}\n    , mutationResolver = Undefined\n    , subscriptionResolver = Undefined\n    }\n\ngqlApi :: ByteString -> IO ByteString\ngqlApi = interpreter rootResolver`}</code>{`\n        `}</deckgo-highlight-code>\n    <p>{`As you can see, the API is defined as `}<inlineCode parentName=\"p\">{`ByteString -> IO ByteString`}</inlineCode>{` which we can either invoke directly or use inside an arbitrary web framework\nsuch as `}<inlineCode parentName=\"p\">{`scotty`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`serverless-haskell`}</inlineCode>{`. We'll go for `}<inlineCode parentName=\"p\">{`scotty`}</inlineCode>{` in this example:`}</p>\n    <deckgo-highlight-code {...{\n      \"language\": \"haskell\",\n      \"terminal\": \"carbon\",\n      \"theme\": \"one-dark\",\n      \"line-numbers\": \"true\"\n    }}>{`\n          `}<code parentName=\"deckgo-highlight-code\" {...{\n        \"slot\": \"code\"\n      }}>{`main :: IO ()\nmain = scotty 3000 $ post \"/api\" $ raw =<< (liftIO . gqlApi =<< body)`}</code>{`\n        `}</deckgo-highlight-code>\n    <p>{`If we now send a POST request to `}<inlineCode parentName=\"p\">{`http://localhost:3000/api`}</inlineCode>{` with a GraphQL Query as body for example in a tool like `}<inlineCode parentName=\"p\">{`Insomnia`}</inlineCode>{`:`}</p>\n    <deckgo-highlight-code {...{\n      \"language\": \"GraphQL\",\n      \"terminal\": \"carbon\",\n      \"theme\": \"one-dark\",\n      \"line-numbers\": \"true\"\n    }}>{`\n          `}<code parentName=\"deckgo-highlight-code\" {...{\n        \"slot\": \"code\"\n      }}>{`query GetDeity {\n  deity (name: \"Morpheus\") {\n    fullName\n    power\n  }\n}`}</code>{`\n        `}</deckgo-highlight-code>\n    <p>{`our query will be resolved!`}</p>\n    <deckgo-highlight-code {...{\n      \"language\": \"JSON\",\n      \"terminal\": \"carbon\",\n      \"theme\": \"one-dark\",\n      \"line-numbers\": \"true\"\n    }}>{`\n          `}<code parentName=\"deckgo-highlight-code\" {...{\n        \"slot\": \"code\"\n      }}>{`{\n  \"data\": {\n    \"deity\": {\n      \"fullName\": \"Morpheus\",\n      \"power\": \"Shapeshifting\"\n    }\n  }\n}`}</code>{`\n        `}</deckgo-highlight-code>\n    <h2>{`Advanced topics`}</h2>\n    <h3>{`Applicative and Monad instance`}</h3>\n    <p>{`The `}<inlineCode parentName=\"p\">{`Resolver`}</inlineCode>{` type has `}<inlineCode parentName=\"p\">{`Applicative`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`Monad`}</inlineCode>{` instances that can be used to compose resolvers.`}</p>\n    <h3>{`Introspection`}</h3>\n    <p>{`Morpheus converts your schema to a GraphQL introspection automatically. You can use tools like `}<inlineCode parentName=\"p\">{`Insomnia`}</inlineCode>{` to take a\nlook at the introspection and validate your schema.\nIf you need a description for your GQLType inside of the introspection you can define the GQLType instance manually\nand provide an implementation for the `}<inlineCode parentName=\"p\">{`description`}</inlineCode>{` function:`}</p>\n    <deckgo-highlight-code {...{\n      \"language\": \"haskell\",\n      \"terminal\": \"carbon\",\n      \"theme\": \"one-dark\",\n      \"line-numbers\": \"true\"\n    }}>{`\n          `}<code parentName=\"deckgo-highlight-code\" {...{\n        \"slot\": \"code\"\n      }}>{`data Deity = Deity\n{ ...\n} deriving (Generic)\n\ninstance GQLType Deity where\n  description = const \"A supernatural being considered divine and sacred\"`}</code>{`\n        `}</deckgo-highlight-code>\n    <p>{`screenshots from `}<inlineCode parentName=\"p\">{`Insomnia`}</inlineCode></p>\n    <p><img parentName=\"p\" {...{\n        \"src\": \"https://morpheusgraphql.com/assets/img/introspection/spelling.png\",\n        \"alt\": \"alt text\",\n        \"title\": \"spelling\"\n      }}></img>{`\n`}<img parentName=\"p\" {...{\n        \"src\": \"https://morpheusgraphql.com/assets/img/introspection/autocomplete.png\",\n        \"alt\": \"alt text\",\n        \"title\": \"autocomplete\"\n      }}></img>{`\n`}<img parentName=\"p\" {...{\n        \"src\": \"https://morpheusgraphql.com/assets/img/introspection/type.png\",\n        \"alt\": \"alt text\",\n        \"title\": \"type\"\n      }}></img></p>\n    <h2>{`Handling Errors`}</h2>\n    <p>{`for errors you can use use either `}<inlineCode parentName=\"p\">{`liftEither`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`MonadFail`}</inlineCode>{`:\nat the and they have same result.`}</p>\n    <p>{`with `}<inlineCode parentName=\"p\">{`liftEither`}</inlineCode></p>\n    <deckgo-highlight-code {...{\n      \"language\": \"haskell\",\n      \"terminal\": \"carbon\",\n      \"theme\": \"one-dark\",\n      \"line-numbers\": \"true\"\n    }}>{`\n          `}<code parentName=\"deckgo-highlight-code\" {...{\n        \"slot\": \"code\"\n      }}>{`resolveDeity :: DeityArgs -> ResolverQ e IO Deity\nresolveDeity DeityArgs {} = liftEither $ dbDeity\n\ndbDeity ::  IO Either Deity\ndbDeity = pure $ Left \"db error\"`}</code>{`\n        `}</deckgo-highlight-code>\n    <p>{`with `}<inlineCode parentName=\"p\">{`MonadFail`}</inlineCode></p>\n    <deckgo-highlight-code {...{\n      \"language\": \"haskell\",\n      \"terminal\": \"carbon\",\n      \"theme\": \"one-dark\",\n      \"line-numbers\": \"true\"\n    }}>{`\n          `}<code parentName=\"deckgo-highlight-code\" {...{\n        \"slot\": \"code\"\n      }}>{`resolveDeity :: DeityArgs -> ResolverQ e IO Deity\nresolveDeity DeityArgs { } = fail \"db error\"`}</code>{`\n        `}</deckgo-highlight-code>\n    <h3>{`Mutations`}</h3>\n    <p>{`In addition to queries, Morpheus also supports mutations. They behave just like regular queries and are defined similarly:`}</p>\n    <deckgo-highlight-code {...{\n      \"language\": \"haskell\",\n      \"terminal\": \"carbon\",\n      \"theme\": \"one-dark\",\n      \"line-numbers\": \"true\"\n    }}>{`\n          `}<code parentName=\"deckgo-highlight-code\" {...{\n        \"slot\": \"code\"\n      }}>{`newtype Mutation m = Mutation\n  { createDeity :: MutArgs -> m Deity\n  } deriving (Generic, GQLType)\n\nrootResolver :: RootResolver IO  () Query Mutation Undefined\nrootResolver =\n  RootResolver\n    { queryResolver = Query {...}\n    , mutationResolver = Mutation { createDeity }\n    , subscriptionResolver = Undefined\n    }\n    where\n      -- Mutation Without Event Triggering\n      createDeity :: MutArgs -> ResolverM () IO Deity\n      createDeity_args = lift setDBAddress\n\ngqlApi :: ByteString -> IO ByteString\ngqlApi = interpreter rootResolver`}</code>{`\n        `}</deckgo-highlight-code>\n    <h3>{`Subscriptions`}</h3>\n    <p>{`In morpheus subscription and mutation communicate with Events,\n`}<inlineCode parentName=\"p\">{`Event`}</inlineCode>{` consists with user defined `}<inlineCode parentName=\"p\">{`Channel`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`Content`}</inlineCode>{`.`}</p>\n    <p>{`Every subscription has its own Channel by which it will be triggered`}</p>\n    <deckgo-highlight-code {...{\n      \"language\": \"haskell\",\n      \"terminal\": \"carbon\",\n      \"theme\": \"one-dark\",\n      \"line-numbers\": \"true\"\n    }}>{`\n          `}<code parentName=\"deckgo-highlight-code\" {...{\n        \"slot\": \"code\"\n      }}>{`data Channel\n  = ChannelA\n  | ChannelB\n\ndata Content\n  = ContentA Int\n  | ContentB Text\n\ntype MyEvent = Event Channel Content\n\nnewtype Query m = Query\n  { deity :: m Deity\n  } deriving (Generic)\n\nnewtype Mutation m = Mutation\n  { createDeity :: m Deity\n  } deriving (Generic)\n\nnewtype Subscription (m ::  * -> * ) = Subscription\n  { newDeity :: m  Deity\n  } deriving (Generic)\n\nnewtype Subscription (m :: * -> *) = Subscription\n{ newDeity :: SubscriptionField (m Deity),\n}\nderiving (Generic)\n\n\ntype APIEvent = Event Channel Content\n\nrootResolver :: RootResolver IO APIEvent Query Mutation Subscription\nrootResolver = RootResolver\n  { queryResolver        = Query { deity = fetchDeity }\n  , mutationResolver     = Mutation { createDeity }\n  , subscriptionResolver = Subscription { newDeity }\n  }\n where\n  -- Mutation Without Event Triggering\n  createDeity :: ResolverM EVENT IO Address\n  createDeity = do\n      requireAuthorized\n      publish [Event { channels = [ChannelA], content = ContentA 1 }]\n      lift dbCreateDeity\n  newDeity :: SubscriptionField (ResolverS EVENT IO Deity)\n  newDeity = subscribe ChannelA $ do\n    -- executed only once\n    -- immediate response on failures\n    requireAuthorized\n    pure $ \\\\(Event _ content) -> do\n        -- executes on every event\n        lift (getDBAddress content)`}</code>{`\n        `}</deckgo-highlight-code>\n    <h2>{`Morpheus CLI for Code Generating`}</h2>\n    <p>{`you should use `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/morpheusgraphql/morpheus-graphql-cli\"\n      }}>{`morpheus-graphql-cli`}</a></p>\n    <h2>{`Roadmap`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`Medium future:`}\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`Stabilize API`}</li>\n          <li parentName=\"ul\">{`Specification-isomorphic error handling`}</li>\n        </ul>\n      </li>\n      <li parentName=\"ul\">{`Long term:`}\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`Support all possible GQL features`}</li>\n          <li parentName=\"ul\">{`Performance optimization`}</li>\n        </ul>\n      </li>\n    </ul>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}"],"sourceRoot":""}