"use strict";(self.webpackChunkmorpheus_graphql_docs=self.webpackChunkmorpheus_graphql_docs||[]).push([[249],{9097:function(e,n,t){t.r(n),t.d(n,{_frontmatter:function(){return s},default:function(){return c}});var r=t(1531),a=(t(7294),t(4983)),o=t(9882),i=(t(1597),t(9357)),l=["components"],s={},h={_frontmatter:s},p=o.Z;function c(e){var n=e.components,t=(0,r.Z)(e,l);return(0,a.kt)(p,Object.assign({},h,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)(i.Z,{title:"Morpheus GraphQL Client",keywords:["Morpheus GraphQL Examples","GraphQL Haskell Client","Type System"],mdxType:"SEO"}),(0,a.kt)("h2",null,"Morpheus GraphQL Client with Template haskell QuasiQuotes"),(0,a.kt)("deckgo-highlight-code",{language:"hs",terminal:"carbon",theme:"one-dark","line-numbers":"true"},"\n          ",(0,a.kt)("code",{parentName:"deckgo-highlight-code",slot:"code"},'defineByDocumentFile\n    "./schema.gql"\n  [gql|\n    query GetHero ($character: Character)\n      {\n        deity (fatherOf:$character) {\n          name\n          power\n          worships {\n            deity2Name: name\n          }\n        }\n      }\n  |]'),"\n        "),(0,a.kt)("p",null,"with schema:"),(0,a.kt)("deckgo-highlight-code",{language:"graphql",terminal:"carbon",theme:"one-dark","line-numbers":"true"},"\n          ",(0,a.kt)("code",{parentName:"deckgo-highlight-code",slot:"code"},"input Character {\n  name: String!\n}\n\ntype Deity {\n  name: String!\n  worships: Deity\n  power: Power!\n}\n\nenum Power {\n  Lightning\n  Teleportation\n  Omniscience\n}"),"\n        "),(0,a.kt)("p",null,"will validate query and Generate:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"namespaced response and variable types"),(0,a.kt)("li",{parentName:"ul"},"instance for ",(0,a.kt)("inlineCode",{parentName:"li"},"Fetch")," typeClass")),(0,a.kt)("deckgo-highlight-code",{language:"haskell",terminal:"carbon",theme:"one-dark","line-numbers":"true"},"\n          ",(0,a.kt)("code",{parentName:"deckgo-highlight-code",slot:"code"},"data GetHero = GetHero {\n  deity: DeityDeity\n}\n\n-- from: {user\ndata DeityDeity = DeityDeity {\n  name: Text,\n  worships: Maybe DeityWorshipsDeity\n  power: Power\n}\n\n-- from: {deity{worships\ndata DeityWorshipsDeity = DeityWorshipsDeity {\n  name: Text,\n}\n\ndata Power =\n    PowerLightning\n  | PowerTeleportation\n  | PowerOmniscience\n\ndata GetHeroArgs = GetHeroArgs {\n  character: Character\n}\n\ndata Character = Character {\n  name: Person\n}"),"\n        "),(0,a.kt)("p",null,"as you see, response type field name collision can be handled with GraphQL ",(0,a.kt)("inlineCode",{parentName:"p"},"alias"),"."),(0,a.kt)("p",null,"with ",(0,a.kt)("inlineCode",{parentName:"p"},"fetch")," you can fetch well typed response ",(0,a.kt)("inlineCode",{parentName:"p"},"GetHero"),"."),(0,a.kt)("deckgo-highlight-code",{language:"haskell",terminal:"carbon",theme:"one-dark","line-numbers":"true"},"\n          ",(0,a.kt)("code",{parentName:"deckgo-highlight-code",slot:"code"},'  fetchHero :: Args GetHero -> m (Either (FetchError GetHero) GetHero)\n  fetchHero = fetch jsonRes args\n      where\n        args = GetHeroArgs {character = Person {name = "Zeus"}}\n        jsonRes :: ByteString -> m ByteString\n        jsonRes = <GraphQL APi>'),"\n        "),(0,a.kt)("p",null,"in this case, ",(0,a.kt)("inlineCode",{parentName:"p"},"jsonRes")," resolves a request into a response in some monad ",(0,a.kt)("inlineCode",{parentName:"p"},"m"),"."),(0,a.kt)("p",null,"A ",(0,a.kt)("inlineCode",{parentName:"p"},"fetch")," resolver implementation against ",(0,a.kt)("a",{parentName:"p",href:"https://swapi.graph.cool"},"a real API")," may look like the following:"),(0,a.kt)("deckgo-highlight-code",{language:"haskell",terminal:"carbon",theme:"one-dark","line-numbers":"true"},"\n          ",(0,a.kt)("code",{parentName:"deckgo-highlight-code",slot:"code"},'{-# LANGUAGE OverloadedStrings #-}\n\nimport Data.ByteString.Lazy (ByteString)\nimport qualified Data.ByteString.Char8 as C8\nimport Network.HTTP.Req\n\nresolver :: String -> ByteString -> IO ByteString\nresolver tok b = runReq defaultHttpConfig $ do\n    let headers = header "Content-Type" "application/json"\n    responseBody <$> req POST (https "swapi.graph.cool") (ReqBodyLbs b) lbsResponse headers'),"\n        "),(0,a.kt)("p",null,"this is demonstrated in examples/src/Client/StarWarsClient.hs"),(0,a.kt)("p",null,"types can be generated from ",(0,a.kt)("inlineCode",{parentName:"p"},"introspection")," too:"),(0,a.kt)("deckgo-highlight-code",{language:"haskell",terminal:"carbon",theme:"one-dark","line-numbers":"true"},"\n          ",(0,a.kt)("code",{parentName:"deckgo-highlight-code",slot:"code"},'defineByIntrospectionFile "./introspection.json"'),"\n        "))}c.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-client-mdx-6d1b8279ff40693a88fa.js.map