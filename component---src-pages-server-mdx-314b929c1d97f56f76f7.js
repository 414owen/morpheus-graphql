(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{"hBC/":function(e,n,t){"use strict";t.r(n),t.d(n,"_frontmatter",(function(){return d})),t.d(n,"default",(function(){return b}));var a=t("zLVn"),i=(t("q1tI"),t("7ljp")),r=t("Bl7J"),o=t("vrFN"),l=t("rxcZ"),c=["components"],d={},s={_frontmatter:d},p=r.a;function b(e){var n=e.components,t=Object(a.a)(e,c);return Object(i.b)(p,Object.assign({},s,t,{components:n,mdxType:"MDXLayout"}),Object(i.b)(o.a,{title:"Type System",keywords:["Morpheus GraphQL","GraphQL","Haskell","Type System"],mdxType:"SEO"}),Object(i.b)("h1",null,"Server"),Object(i.b)(l.a,{id:"type-system",mdxType:"Section"},"Type System"),Object(i.b)("p",null,"Morpheus GraphQL covers all GraphQL data types with an equivalent\nHaskell representation. A prerequisite for these representation types is that\nthey must be derived by ",Object(i.b)("inlineCode",{parentName:"p"},"Generic")," and provide corresponding ",Object(i.b)("inlineCode",{parentName:"p"},"GQLType")," instances."),Object(i.b)(l.a,{id:"objects",level:2,mdxType:"Section"},"Object types"),Object(i.b)("p",null,"Object types are represented in Morpheus with Haskell records,\nwhere the parameter ",Object(i.b)("inlineCode",{parentName:"p"},"m")," passes the resolution monad\nto the field resolution functions. The following code snippet, for example,\ndefines the type Deity with a nullable field ",Object(i.b)("inlineCode",{parentName:"p"},"power")," and a non-nullable field ",Object(i.b)("inlineCode",{parentName:"p"},"name"),"."),Object(i.b)("deckgo-highlight-code",{language:"haskell",terminal:"carbon",theme:"one-dark","line-numbers":"true"},"\n          ",Object(i.b)("code",{parentName:"deckgo-highlight-code",slot:"code"},"data Deity m = Deity\n  { name :: m Text         -- Non-Nullable Field\n  , power :: m Maybe Text   -- Nullable Field\n  } deriving\n    ( Generic\n    , GQLType\n    )"),"\n        "),Object(i.b)(l.a,{id:"arguments",level:3,mdxType:"Section"},"Arguments"),Object(i.b)("p",null,"GraphQL arguments can be represented with two ways:"),Object(i.b)("h4",null,"Haskell records"),Object(i.b)("p",null,"we can use Haskell records to declare GraphQL arguments,\nwhere each field of a record represents a particular\nargument, and can be accessed by name."),Object(i.b)("deckgo-highlight-code",{language:"haskell",terminal:"carbon",theme:"one-dark","line-numbers":"true"},"\n          ",Object(i.b)("code",{parentName:"deckgo-highlight-code",slot:"code"},"data Query m = Query\n  { deity :: DeityArgs -> m Deity\n  } deriving\n    ( Generic\n    , GQLType\n    )\n\ndata DeityArgs = DeityArgs\n  { name      :: Text        -- Required Argument\n  , mythology :: Maybe Text  -- Optional Argument\n  } deriving\n     ( Generic,\n       GQLType\n     )"),"\n        "),Object(i.b)("p",null,'This approach is quite convenient for representing multiple arguments,\nbut cumbersome if we only need one argument for each field.\nThat is why we also introduce "Tagged Arguments".'),Object(i.b)("h4",null,"Tagged function arguments"),Object(i.b)("p",null,"Tagged arguments leverage type-level literals and enable GraphQL\narguments to be represented as a chain of named function arguments.\ne.g. the following type defines GraphQL field ",Object(i.b)("inlineCode",{parentName:"p"},"deity")," with the\noptional argument ",Object(i.b)("inlineCode",{parentName:"p"},"name")," of type ",Object(i.b)("inlineCode",{parentName:"p"},"String"),"."),Object(i.b)("deckgo-highlight-code",{language:"haskell",terminal:"carbon",theme:"one-dark","line-numbers":"true"},"\n          ",Object(i.b)("code",{parentName:"deckgo-highlight-code",slot:"code"},'data Query m = Query\n  { deity :: Arg "name" (Maybe Text) -> m Deity\n  } deriving\n    ( Generic\n    , GQLType\n    )'),"\n        "),Object(i.b)(l.a,{id:"query",level:3,mdxType:"Section"},"Query"),Object(i.b)("p",null,"the GraphQL query type is represented in Morpheus GraphQL as a regular object type named ",Object(i.b)("inlineCode",{parentName:"p"},"Query"),"."),Object(i.b)("deckgo-highlight-code",{language:"haskell",terminal:"carbon",theme:"one-dark","line-numbers":"true"},"\n          ",Object(i.b)("code",{parentName:"deckgo-highlight-code",slot:"code"},"data Query m = Query\n  { deity ::  m Deity\n  } deriving\n    ( Generic\n    , GQLType\n    )"),"\n        "),Object(i.b)(l.a,{id:"mutations",level:3,mdxType:"Section"},"Mutations"),Object(i.b)("p",null,"In addition to queries, Morpheus also supports mutations. They behave just like regular queries and are defined similarly:"),Object(i.b)("deckgo-highlight-code",{language:"haskell",terminal:"carbon",theme:"one-dark","line-numbers":"true"},"\n          ",Object(i.b)("code",{parentName:"deckgo-highlight-code",slot:"code"},"newtype Mutation m = Mutation\n  { createDeity :: MutArgs -> m Deity\n  } deriving (Generic, GQLType)\n\nrootResolver :: RootResolver IO  () Query Mutation Undefined\nrootResolver =\n  RootResolver\n    { queryResolver = Query {...}\n    , mutationResolver = Mutation { createDeity }\n    , subscriptionResolver = Undefined\n    }\n    where\n      -- Mutation Without Event Triggering\n      createDeity :: MutArgs -> ResolverM () IO Deity\n      createDeity_args = lift setDBAddress\n\ngqlApi :: ByteString -> IO ByteString\ngqlApi = interpreter rootResolver"),"\n        "),Object(i.b)(l.a,{id:"subscription",level:3,mdxType:"Section"},"Subscriptions"),Object(i.b)("p",null,"In morpheus subscription and mutation communicate with Events,\n",Object(i.b)("inlineCode",{parentName:"p"},"Event")," consists with user defined ",Object(i.b)("inlineCode",{parentName:"p"},"Channel")," and ",Object(i.b)("inlineCode",{parentName:"p"},"Content"),"."),Object(i.b)("p",null,"Every subscription has its own Channel by which it will be triggered"),Object(i.b)("deckgo-highlight-code",{language:"haskell",terminal:"carbon",theme:"one-dark","line-numbers":"true"},"\n          ",Object(i.b)("code",{parentName:"deckgo-highlight-code",slot:"code"},"data Channel\n  = ChannelA\n  | ChannelB\n\ndata Content\n  = ContentA Int\n  | ContentB Text\n\ntype MyEvent = Event Channel Content\n\nnewtype Query m = Query\n  { deity :: m Deity\n  } deriving (Generic)\n\nnewtype Mutation m = Mutation\n  { createDeity :: m Deity\n  } deriving (Generic)\n\nnewtype Subscription (m ::  * -> * ) = Subscription\n  { newDeity :: m  Deity\n  } deriving (Generic)\n\nnewtype Subscription (m :: * -> *) = Subscription\n{ newDeity :: SubscriptionField (m Deity),\n}\nderiving (Generic)\n\n\ntype APIEvent = Event Channel Content\n\nrootResolver :: RootResolver IO APIEvent Query Mutation Subscription\nrootResolver = RootResolver\n  { queryResolver        = Query { deity = fetchDeity }\n  , mutationResolver     = Mutation { createDeity }\n  , subscriptionResolver = Subscription { newDeity }\n  }\n where\n  -- Mutation Without Event Triggering\n  createDeity :: ResolverM EVENT IO Address\n  createDeity = do\n      requireAuthorized\n      publish [Event { channels = [ChannelA], content = ContentA 1 }]\n      lift dbCreateDeity\n  newDeity :: SubscriptionField (ResolverS EVENT IO Deity)\n  newDeity = subscribe ChannelA $ do\n    -- executed only once\n    -- immediate response on failures\n    requireAuthorized\n    pure $ \\(Event _ content) -> do\n        -- executes on every event\n        lift (getDBAddress content)"),"\n        "),Object(i.b)(l.a,{id:"scalars",level:2,mdxType:"Section"},"Scalar types"),Object(i.b)("p",null,"any Haskell data type can be represented as a GraphQL scalar type.\nIn order to do this, the type must be associated as\n",Object(i.b)("inlineCode",{parentName:"p"},"SCALAR")," and implemented with ",Object(i.b)("inlineCode",{parentName:"p"},"DecodeScalar")," and ",Object(i.b)("inlineCode",{parentName:"p"},"EncodeScalar")," instances."),Object(i.b)("deckgo-highlight-code",{language:"haskell",terminal:"carbon",theme:"one-dark","line-numbers":"true"},"\n          ",Object(i.b)("code",{parentName:"deckgo-highlight-code",slot:"code"},'data Odd = Odd Int  deriving (Generic)\n\ninstance DecodeScalar Euro where\n  decodeScalar (Int x) = pure $ Odd (... )\n  decodeScalar _ = Left "invalid Value!"\n\ninstance EncodeScalar Euro where\n  encodeScalar (Odd value) = Int value\n\ninstance GQLType Odd where\n  type KIND Odd = SCALAR'),"\n        "),Object(i.b)(l.a,{id:"enums",level:2,mdxType:"Section"},"Enumeration types"),Object(i.b)("p",null,"Data types where all constructors are empty are derived as GraphQL enums."),Object(i.b)("deckgo-highlight-code",{language:"haskell",terminal:"carbon",theme:"one-dark","line-numbers":"true"},"\n          ",Object(i.b)("code",{parentName:"deckgo-highlight-code",slot:"code"},"data City\n  = Athens\n  | Sparta\n  | Corinth\n  | Delphi\n  | Argos\n  deriving\n    ( Generic\n    , GQLType\n    )"),"\n        "),Object(i.b)(l.a,{id:"wrappers",level:2,mdxType:"Section"},"Lists and Non-Null"),Object(i.b)("p",null,"GraphQL Lists are represented with Haskell Lists.\nHowever, since in Haskell each type is intrinsically not nullable,\nnullable GraphQL fields are represented with ",Object(i.b)("inlineCode",{parentName:"p"},"Maybe")," Haskell data type and non-nullable\nGraphQL fields with regular Haskell datatypes."),Object(i.b)(l.a,{id:"interfaces",level:2,mdxType:"Section"},"Interfaces"),Object(i.b)("h6",null,"Note: this feature will be introduced in version ",Object(i.b)("strong",{parentName:"h6"},"0.18.0")),Object(i.b)("p",null,"GraphQL interfaces is represented in Morpheus with ",Object(i.b)("inlineCode",{parentName:"p"},"TypeGuard"),".\nin the following data type definition every use of ",Object(i.b)("inlineCode",{parentName:"p"},"PersonInterface"),"\nwill be represented as GraphQL interface ",Object(i.b)("inlineCode",{parentName:"p"},"Person")," and allow server to\nresolve different types from union ",Object(i.b)("inlineCode",{parentName:"p"},"PersonImplements"),"."),Object(i.b)("p",null,"All types of the union ",Object(i.b)("inlineCode",{parentName:"p"},"PersonImplements")," must be objects\nand contain fields of type ",Object(i.b)("inlineCode",{parentName:"p"},"Person"),", otherwise the derivation fails."),Object(i.b)("deckgo-highlight-code",{language:"haskell",terminal:"carbon",theme:"one-dark","line-numbers":"true"},"\n          ",Object(i.b)("code",{parentName:"deckgo-highlight-code",slot:"code"},"  -- interface Person\ndata Person m = Person { name ::  m Text }\n  deriving\n    (\n      Generic,\n      GQLType\n    )\n\ndata PersonImplements m\n  = PersonImplementsUser (User m)\n  | PersonImplementsDeity (Deity m)\n  deriving\n    (\n      Generic,\n      GQLType\n    )\n\n-- typeGuard guards all variabts of union with person fields\ntype PersonInterface m = TypeGuard Person (PersonImplements m)"),"\n        "),Object(i.b)(l.a,{id:"unions",level:2,mdxType:"Section"},"Unions"),Object(i.b)("p",null,"To use union type, all you have to do is derive the ",Object(i.b)("inlineCode",{parentName:"p"},"GQLType")," class. Using GraphQL ",Object(i.b)("a",{parentName:"p",href:"https://graphql.org/learn/queries/#fragments"},Object(i.b)("em",{parentName:"a"},"fragments")),", the arguments of each data constructor can be accessed from the GraphQL client."),Object(i.b)("deckgo-highlight-code",{language:"haskell",terminal:"carbon",theme:"one-dark","line-numbers":"true"},"\n          ",Object(i.b)("code",{parentName:"deckgo-highlight-code",slot:"code"},"data Character\n  = CharacterDeity Deity -- will be unwrapped, since Character + Deity = CharacterDeity\n  | SomeDeity Deity -- will be wrapped since Character + Deity != SomeDeity\n  | Creature { creatureName :: Text, creatureAge :: Int }\n  | Demigod Text Text\n  | Zeus\n  deriving (Generic, GQLType)"),"\n        "),Object(i.b)("p",null,"where ",Object(i.b)("inlineCode",{parentName:"p"},"Deity")," is an object."),Object(i.b)("p",null,"As we see, there are different kinds of unions. ",Object(i.b)("inlineCode",{parentName:"p"},"Morpheus")," handles them all."),Object(i.b)("p",null,"This type will be represented as"),Object(i.b)("deckgo-highlight-code",{language:"graphql",terminal:"carbon",theme:"one-dark","line-numbers":"true"},"\n          ",Object(i.b)("code",{parentName:"deckgo-highlight-code",slot:"code"},"union Character = Deity | SomeDeity | Creature | SomeMulti | Zeus\n\ntype SomeDeity {\n  _0: Deity!\n}\n\ntype Creature {\n  creatureName: String!\n  creatureAge: Int!\n}\n\ntype Demigod {\n  _0: Int!\n  _1: String!\n}\n\ntype Zeus {\n  _: Unit!\n}"),"\n        "),Object(i.b)("p",null,"By default, union members will be generated with wrapper objects.\nThere is one exception to this: if a constructor of a type is the type name concatenated with the name of the contained type, it will be referenced directly.\nThat is, given:"),Object(i.b)("deckgo-highlight-code",{language:"haskell",terminal:"carbon",theme:"one-dark","line-numbers":"true"},"\n          ",Object(i.b)("code",{parentName:"deckgo-highlight-code",slot:"code"},"data Song = { songName :: Text, songDuration :: Float } deriving (Generic, GQLType)\n\ndata Skit = { skitName :: Text, skitDuration :: Float } deriving (Generic, GQLType)\n\ndata WrappedNode\n  = WrappedSong Song\n  | WrappedSkit Skit\n  deriving (Generic, GQLType)\n\ndata NonWrapped\n  = NonWrappedSong Song\n  | NonWrappedSkit Skit\n  deriving (Generic, GQLType)\n"),"\n        "),Object(i.b)("p",null,"You will get the following schema:"),Object(i.b)("deckgo-highlight-code",{language:"graphql",terminal:"carbon",theme:"one-dark","line-numbers":"true"},"\n          ",Object(i.b)("code",{parentName:"deckgo-highlight-code",slot:"code"},"# has wrapper types\nunion WrappedNode = WrappedSong | WrappedSkit\n\n# is a direct union\nunion NonWrapped = Song | Skit\n\ntype WrappedSong {\n  _0: Song!\n}\n\ntype WrappedSKit {\n  _0: Skit!\n}\n\ntype Song {\n  songDuration: Float!\n  songName: String!\n}\n\ntype Skit {\n  skitDuration: Float!\n  skitName: String!\n}"),"\n        "),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"for all other unions will be generated new object type. for types without record syntax, fields will be automatically indexed.")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"empty constructors will get field ",Object(i.b)("inlineCode",{parentName:"p"},"_"),"associaced with type ",Object(i.b)("inlineCode",{parentName:"p"},"Unit"),"."))),Object(i.b)(l.a,{id:"inputs",level:2,mdxType:"Section"},"Input types"),Object(i.b)("p",null,"Like object types, input types are represented by Haskell records.\nHowever, they are not permitted to have monad parameters, as they represent serialisable values."),Object(i.b)("deckgo-highlight-code",{language:"haskell",terminal:"carbon",theme:"one-dark","line-numbers":"true"},"\n          ",Object(i.b)("code",{parentName:"deckgo-highlight-code",slot:"code"},"data Deity = Deity\n  { name :: Text         -- Non-Nullable Field\n  , power :: Maybe Text   -- Nullable Field\n  } deriving\n    ( Generic\n    , GQLType\n    )"),"\n        "))}b.isMDXComponent=!0},rxcZ:function(e,n,t){"use strict";t.d(n,"a",(function(){return l}));var a=t("q1tI"),i=t.n(a),r=t("8i+l"),o={color:"black",textDecoration:"none",padding:"0.1rem 0rem"},l=function(e){var n=e.id,t=e.children,l=e.level,c=void 0===l?1:l;return(0,Object(a.useContext)(r.a)[1])({id:n,level:c,children:t}),1===c?i.a.createElement("h2",{id:""+n,style:o},t):i.a.createElement("h3",{id:""+n,style:o},t)};n.b=l}}]);
//# sourceMappingURL=component---src-pages-server-mdx-314b929c1d97f56f76f7.js.map