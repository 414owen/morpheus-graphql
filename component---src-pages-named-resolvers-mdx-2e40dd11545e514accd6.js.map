{"version":3,"sources":["webpack:///./src/pages/named-resolvers.mdx","webpack:///./node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","title","keywords","parentName","isMDXComponent","_objectWithoutPropertiesLoose","source","excluded","key","i","target","sourceKeys","Object","keys","length","indexOf"],"mappings":"qRAWaA,EAAe,GACtBC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,iBACD,OAAO,YAACJ,EAAD,iBAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAK5E,YAAC,IAAD,CAAKC,MAAM,kBAAkBC,SAAU,CAAC,mBAAoB,UAAW,WAAYF,QAAQ,QAC3F,yCACA,8EAA6D,sBAAQG,WAAW,KAAnB,WAC7D,qBAAG,kBAAIA,WAAW,KAAf,aACH,qCACE,SAAY,KACZ,SAAY,SACZ,MAAS,WACT,eAAgB,QAJlB,eAMQ,oBAAMA,WAAW,wBACrB,KAAQ,QADJ,szBANR,cA0CA,qBAAG,kBAAIA,WAAW,KAAf,eACH,qCACE,SAAY,KACZ,SAAY,SACZ,MAAS,WACT,eAAgB,QAJlB,eAMQ,oBAAMA,WAAW,wBACrB,KAAQ,QADJ,4uCANR,cAwDA,qBAAG,kBAAIA,WAAW,KAAf,WACH,qCACE,SAAY,KACZ,SAAY,SACZ,MAAS,WACT,eAAgB,QAJlB,eAMQ,oBAAMA,WAAW,wBACrB,KAAQ,QADJ,kDANR,cAWA,uCAAsB,0BAAYA,WAAW,KAAvB,QAAtB,0CAAiH,0BAAYA,WAAW,KAAvB,MAAjH,8DAEF,0BAAYA,WAAW,KAAvB,QAFE,oCAEmF,0BAAYA,WAAW,KAAvB,UAFnF,MAOJN,EAAWO,gBAAiB,G,kCCnJb,SAASC,EAA8BC,EAAQC,GAC5D,GAAc,MAAVD,EAAgB,MAAO,GAC3B,IAEIE,EAAKC,EAFLC,EAAS,GACTC,EAAaC,OAAOC,KAAKP,GAG7B,IAAKG,EAAI,EAAGA,EAAIE,EAAWG,OAAQL,IACjCD,EAAMG,EAAWF,GACbF,EAASQ,QAAQP,IAAQ,IAC7BE,EAAOF,GAAOF,EAAOE,IAGvB,OAAOE,EAZT","file":"component---src-pages-named-resolvers-mdx-2e40dd11545e514accd6.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/morpheus-graphql/morpheus-graphql/docs/src/components/layout.js\";\nimport { Link } from \"gatsby\";\nimport Layout from \"../components/layout\";\nimport SEO from \"../components/seo\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n\n    <SEO title=\"Named Resolvers\" keywords={[\"Morpheus GraphQL\", \"GraphQL\", \"Haskell\"]} mdxType=\"SEO\" />\n    <h2>{`Named Resolvers`}</h2>\n    <p>{`this feature requres minimum Morpheus GraphQL version `}<strong parentName=\"p\">{`0.18.0`}</strong></p>\n    <p><em parentName=\"p\">{`Posts.hs`}</em></p>\n    <deckgo-highlight-code {...{\n      \"language\": \"hs\",\n      \"terminal\": \"carbon\",\n      \"theme\": \"one-dark\",\n      \"line-numbers\": \"true\"\n    }}>{`\n          `}<code parentName=\"deckgo-highlight-code\" {...{\n        \"slot\": \"code\"\n      }}>{`newtype Post m = Post\n  { title :: m Text\n  }\n  deriving (Generic, GQLType)\n\ninstance Monad m => ResolveNamed m (Post (NamedResolverT m)) where\n  type Dep (Post (NamedResolverT m)) = ID\n  resolveNamed uid =\n    pure Post { title = resolve (getPostTitle uid)}\n\n-- QUERY\ndata Query m = Query\n  { posts :: m [Post m],\n    post :: Arg \"id\" ID -> m (Maybe (Post m))\n  }\n  deriving\n    ( Generic,\n      GQLType\n    )\n\ninstance Monad m => ResolveNamed m (Query (NamedResolverT m)) where\n  type Dep (Query (NamedResolverT m)) = ()\n  resolveNamed () =\n    pure\n      Query\n        { posts = resolve getPostIds,\n          post = \\\\(Arg arg) -> resolve (pure (Just arg))\n        }\n\npostsApp :: App () IO\npostsApp =\n  deriveApp\n    (NamedResolvers :: NamedResolvers IO () Query Undefined Undefined)`}</code>{`\n        `}</deckgo-highlight-code>\n    <p><em parentName=\"p\">{`Authors.hs`}</em></p>\n    <deckgo-highlight-code {...{\n      \"language\": \"hs\",\n      \"terminal\": \"carbon\",\n      \"theme\": \"one-dark\",\n      \"line-numbers\": \"true\"\n    }}>{`\n          `}<code parentName=\"deckgo-highlight-code\" {...{\n        \"slot\": \"code\"\n      }}>{`data Author m = Author\n  { name :: m Text,\n    posts :: m [Post m]\n  } deriving (Generic, GQLType)\n\ninstance Monad m => ResolveNamed m (Author (NamedResolverT m)) where\n  type Dep (Author (NamedResolverT m)) = ID\n  resolveNamed uid =\n    pure\n      Author\n        { name = resolve (getAuthorName uid),\n          posts = resolve (getAuthorPosts uid)\n        }\n\n-- is alternative to extend type\nnewtype Post m = Post\n  { author :: m (Author m)\n  } deriving (Generic, GQLType)\n\ninstance Monad m => ResolveNamed m (Post (NamedResolverT m)) where\n  type Dep (Post (NamedResolverT m)) = ID\n  resolveNamed uid =\n    pure\n      Post\n        { author = resolve (pure uid)\n        }\n\n-- QUERY\ndata Query m = Query\n  { authors :: m [Author m],\n    authorById :: Arg \"id\" ID -> m (Maybe (Author m))\n  }\n  deriving (Generic, GQLType)\n\ninstance Monad m => ResolveNamed m (Query (NamedResolverT m)) where\n  type Dep (Query (NamedResolverT m)) = ()\n  resolveNamed () =\n    pure\n      Query\n        { authors = resolve getAuthorIds,\n          authorById = \\\\(Arg uid) -> resolve (pure (Just uid))\n        }\n\nauthorsApp :: App () IO\nauthorsApp =\n  deriveApp\n    (NamedResolvers :: NamedResolvers IO () Query Undefined Undefined)`}</code>{`\n        `}</deckgo-highlight-code>\n    <p><em parentName=\"p\">{`App.hs`}</em></p>\n    <deckgo-highlight-code {...{\n      \"language\": \"hs\",\n      \"terminal\": \"carbon\",\n      \"theme\": \"one-dark\",\n      \"line-numbers\": \"true\"\n    }}>{`\n          `}<code parentName=\"deckgo-highlight-code\" {...{\n        \"slot\": \"code\"\n      }}>{`app :: App () IO\napp = authorsApp <> postsApp`}</code>{`\n        `}</deckgo-highlight-code>\n    <p>{`since the both `}<inlineCode parentName=\"p\">{`Post`}</inlineCode>{` type definitions have same dependency `}<inlineCode parentName=\"p\">{`ID`}</inlineCode>{`,\nthe interpreter safelly merge this two apps where type\n`}<inlineCode parentName=\"p\">{`Post`}</inlineCode>{` will be extended with new field `}<inlineCode parentName=\"p\">{`author`}</inlineCode>{`.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}"],"sourceRoot":""}